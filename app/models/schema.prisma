datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  users       User[]
}

model User {
  email       String    @id @unique
  password    String
  role        Role      @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id     Int 
  token       String
  patients    Patient[]
  specialists Specialist[]
  token       String
}

model Patient {
  id          Int       @id @default(autoincrement())
  first_name  String    
  last_name   String    
  email       String    
  user        User      @relation(fields: [email], references: [email], onDelete: Cascade)
  appointments Appointment[]
}

model Specialization {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String    
  specialists Specialist[]
  keywords    Keyword[]
}

model Document {
  id              Int       @id @default(autoincrement())
  specialist      Specialist  @relation(fields: [specialist_id], references: [id])
  specialist_id   Int
  path            String 
}

model Specialist {
  id                  Int                @id @default(autoincrement())
  first_name          String    
  last_name           String    
  specialization      Specialization     @relation(fields: [specialization_id], references: [id])
  specialization_id   Int
  user                User               @relation(fields: [email], references: [email], onDelete: Cascade)
  email               String    
  price               Float  
  confirmed           Boolean
  appointments        Appointment[]
  documents           Document[]
}

model Keyword {
  id                  Int                @id @default(autoincrement())
  specialization      Specialization     @relation(fields: [specialization_id], references: [id], onDelete: Cascade)
  specialization_id   Int
}

model Rating {
  id                  Int                @id @default(autoincrement())
  appointment         Appointment        @relation(fields: [appointment_id], references: [id])
  appointment_id      Int
  reviews             String
  count_rated         Int
  rating              Float
}

model Payment {
  id                  Int                @id @default(autoincrement())
  appointment         Appointment        @relation(fields: [appointment_id], references: [id])
  appointment_id      Int
  amount              Int
  date                DateTime
  bill_number         Int             
}

model Room {
  id            Int       @id @default(autoincrement())
  name          String  
  appointments  Appointment[]
}

model Appointment {
  id              Int         @id @default(autoincrement())
  patient         Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  patient_id      Int
  specialist      Specialist  @relation(fields: [specialist_id], references: [id])
  specialist_id   Int
  room            Room        @relation(fields: [room_id], references: [id])
  room_id         Int
  appointed_at    DateTime
  end_time        DateTime
  comments        String
  approved        Boolean
  ratings         Rating[]
  payments        Payment[]
}