
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Role
 * 
 */
export type Role = {
  id: number
  name: string
}

/**
 * Model User
 * 
 */
export type User = {
  email: string
  password: string
  role_id: number
}

/**
 * Model Patient
 * 
 */
export type Patient = {
  id: number
  first_name: string
  last_name: string
  email: string
}

/**
 * Model Specialization
 * 
 */
export type Specialization = {
  id: number
  name: string
  description: string
}

/**
 * Model Document
 * 
 */
export type Document = {
  id: number
  specialist_id: number
  path: string
}

/**
 * Model Specialist
 * 
 */
export type Specialist = {
  id: number
  first_name: string
  last_name: string
  specialization_id: number
  email: string
  price: number
  confirmed: boolean
}

/**
 * Model Keyword
 * 
 */
export type Keyword = {
  id: number
  specialization_id: number
}

/**
 * Model Rating
 * 
 */
export type Rating = {
  id: number
  appointment_id: number
  reviews: string
  count_rated: number
  rating: number
}

/**
 * Model Payment
 * 
 */
export type Payment = {
  id: number
  appointment_id: number
  amount: number
  date: Date
  bill_number: number
}

/**
 * Model Room
 * 
 */
export type Room = {
  id: number
  name: string
}

/**
 * Model Appointment
 * 
 */
export type Appointment = {
  id: number
  patient_id: number
  specialist_id: number
  room_id: number
  appointed_at: Date
  end_time: Date
  comments: string
  approved: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Roles
 * const roles = await prisma.role.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<GlobalReject>;

  /**
   * `prisma.specialization`: Exposes CRUD operations for the **Specialization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specializations
    * const specializations = await prisma.specialization.findMany()
    * ```
    */
  get specialization(): Prisma.SpecializationDelegate<GlobalReject>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<GlobalReject>;

  /**
   * `prisma.specialist`: Exposes CRUD operations for the **Specialist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specialists
    * const specialists = await prisma.specialist.findMany()
    * ```
    */
  get specialist(): Prisma.SpecialistDelegate<GlobalReject>;

  /**
   * `prisma.keyword`: Exposes CRUD operations for the **Keyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keywords
    * const keywords = await prisma.keyword.findMany()
    * ```
    */
  get keyword(): Prisma.KeywordDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<GlobalReject>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<GlobalReject>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<GlobalReject>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Role: 'Role',
    User: 'User',
    Patient: 'Patient',
    Specialization: 'Specialization',
    Document: 'Document',
    Specialist: 'Specialist',
    Keyword: 'Keyword',
    Rating: 'Rating',
    Payment: 'Payment',
    Room: 'Room',
    Appointment: 'Appointment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect = {
    users?: boolean
  }

  export type RoleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoleCountOutputType
    : S extends undefined
    ? never
    : S extends RoleCountOutputTypeArgs
    ?'include' extends U
    ? RoleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoleCountOutputType ? RoleCountOutputType[P] : never
  } 
    : RoleCountOutputType
  : RoleCountOutputType




  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     * 
    **/
    select?: RoleCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    patients: number
    specialists: number
  }

  export type UserCountOutputTypeSelect = {
    patients?: boolean
    specialists?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type PatientCountOutputType
   */


  export type PatientCountOutputType = {
    appointments: number
  }

  export type PatientCountOutputTypeSelect = {
    appointments?: boolean
  }

  export type PatientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PatientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PatientCountOutputType
    : S extends undefined
    ? never
    : S extends PatientCountOutputTypeArgs
    ?'include' extends U
    ? PatientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PatientCountOutputType ? PatientCountOutputType[P] : never
  } 
    : PatientCountOutputType
  : PatientCountOutputType




  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     * 
    **/
    select?: PatientCountOutputTypeSelect | null
  }



  /**
   * Count Type SpecializationCountOutputType
   */


  export type SpecializationCountOutputType = {
    specialists: number
    keywords: number
  }

  export type SpecializationCountOutputTypeSelect = {
    specialists?: boolean
    keywords?: boolean
  }

  export type SpecializationCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SpecializationCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SpecializationCountOutputType
    : S extends undefined
    ? never
    : S extends SpecializationCountOutputTypeArgs
    ?'include' extends U
    ? SpecializationCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SpecializationCountOutputType ? SpecializationCountOutputType[P] : never
  } 
    : SpecializationCountOutputType
  : SpecializationCountOutputType




  // Custom InputTypes

  /**
   * SpecializationCountOutputType without action
   */
  export type SpecializationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SpecializationCountOutputType
     * 
    **/
    select?: SpecializationCountOutputTypeSelect | null
  }



  /**
   * Count Type SpecialistCountOutputType
   */


  export type SpecialistCountOutputType = {
    appointments: number
    documents: number
  }

  export type SpecialistCountOutputTypeSelect = {
    appointments?: boolean
    documents?: boolean
  }

  export type SpecialistCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SpecialistCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SpecialistCountOutputType
    : S extends undefined
    ? never
    : S extends SpecialistCountOutputTypeArgs
    ?'include' extends U
    ? SpecialistCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SpecialistCountOutputType ? SpecialistCountOutputType[P] : never
  } 
    : SpecialistCountOutputType
  : SpecialistCountOutputType




  // Custom InputTypes

  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SpecialistCountOutputType
     * 
    **/
    select?: SpecialistCountOutputTypeSelect | null
  }



  /**
   * Count Type RoomCountOutputType
   */


  export type RoomCountOutputType = {
    appointments: number
  }

  export type RoomCountOutputTypeSelect = {
    appointments?: boolean
  }

  export type RoomCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoomCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoomCountOutputType
    : S extends undefined
    ? never
    : S extends RoomCountOutputTypeArgs
    ?'include' extends U
    ? RoomCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoomCountOutputType ? RoomCountOutputType[P] : never
  } 
    : RoomCountOutputType
  : RoomCountOutputType




  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     * 
    **/
    select?: RoomCountOutputTypeSelect | null
  }



  /**
   * Count Type AppointmentCountOutputType
   */


  export type AppointmentCountOutputType = {
    ratings: number
    payments: number
  }

  export type AppointmentCountOutputTypeSelect = {
    ratings?: boolean
    payments?: boolean
  }

  export type AppointmentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppointmentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppointmentCountOutputType
    : S extends undefined
    ? never
    : S extends AppointmentCountOutputTypeArgs
    ?'include' extends U
    ? AppointmentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AppointmentCountOutputType ? AppointmentCountOutputType[P] : never
  } 
    : AppointmentCountOutputType
  : AppointmentCountOutputType




  // Custom InputTypes

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     * 
    **/
    select?: AppointmentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which Role to aggregate.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs = {
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithAggregationInput>
    by: Array<RoleScalarFieldEnum>
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleInclude = {
    users?: boolean | UserFindManyArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleGetPayload<
    S extends boolean | null | undefined | RoleArgs,
    U = keyof S
      > = S extends true
        ? Role
    : S extends undefined
    ? never
    : S extends RoleArgs | RoleFindManyArgs
    ?'include' extends U
    ? Role  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Role ? Role[P] : never
  } 
    : Role
  : Role


  type RoleCountArgs = Merge<
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }
  >

  export interface RoleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null, null>, Prisma__RoleClient<RoleGetPayload<T> | null, null>>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Role'> extends True ? CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>> : CheckSelect<T, Prisma__RoleClient<Role | null, null>, Prisma__RoleClient<RoleGetPayload<T> | null, null>>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs>(
      args?: SelectSubset<T, RoleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Role>>, PrismaPromise<Array<RoleGetPayload<T>>>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs>(
      args: SelectSubset<T, RoleCreateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs>(
      args?: SelectSubset<T, RoleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs>(
      args: SelectSubset<T, RoleDeleteArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs>(
      args: SelectSubset<T, RoleUpdateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs>(
      args?: SelectSubset<T, RoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs>(
      args: SelectSubset<T, RoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs>(
      args: SelectSubset<T, RoleUpsertArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Find one Role that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Find the first Role that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>| Null>, PrismaPromise<Array<UserGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Role base type for findUnique actions
   */
  export type RoleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where: RoleWhereUniqueInput
  }

  /**
   * Role: findUnique
   */
  export interface RoleFindUniqueArgs extends RoleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role base type for findFirst actions
   */
  export type RoleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RoleScalarFieldEnum>
  }

  /**
   * Role: findFirst
   */
  export interface RoleFindFirstArgs extends RoleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findMany
   */
  export type RoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     * 
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to create a Role.
     * 
    **/
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs = {
    /**
     * The data used to create many Roles.
     * 
    **/
    data: Enumerable<RoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The data needed to update a Role.
     * 
    **/
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs = {
    /**
     * The data used to update Roles.
     * 
    **/
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     * 
    **/
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * The filter to search for the Role to update in case it exists.
     * 
    **/
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     * 
    **/
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
    /**
     * Filter which Role to delete.
     * 
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs = {
    /**
     * Filter which Roles to delete
     * 
    **/
    where?: RoleWhereInput
  }


  /**
   * Role: findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs = RoleFindUniqueArgsBase
      

  /**
   * Role: findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs = RoleFindFirstArgsBase
      

  /**
   * Role without action
   */
  export type RoleArgs = {
    /**
     * Select specific fields to fetch from the Role
     * 
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoleInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    role_id: number | null
  }

  export type UserSumAggregateOutputType = {
    role_id: number | null
  }

  export type UserMinAggregateOutputType = {
    email: string | null
    password: string | null
    role_id: number | null
  }

  export type UserMaxAggregateOutputType = {
    email: string | null
    password: string | null
    role_id: number | null
  }

  export type UserCountAggregateOutputType = {
    email: number
    password: number
    role_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    role_id?: true
  }

  export type UserSumAggregateInputType = {
    role_id?: true
  }

  export type UserMinAggregateInputType = {
    email?: true
    password?: true
    role_id?: true
  }

  export type UserMaxAggregateInputType = {
    email?: true
    password?: true
    role_id?: true
  }

  export type UserCountAggregateInputType = {
    email?: true
    password?: true
    role_id?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    email: string
    password: string
    role_id: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    email?: boolean
    password?: boolean
    role?: boolean | RoleArgs
    role_id?: boolean
    patients?: boolean | PatientFindManyArgs
    specialists?: boolean | SpecialistFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    role?: boolean | RoleArgs
    patients?: boolean | PatientFindManyArgs
    specialists?: boolean | SpecialistFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'role' ? RoleGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'patients' ? Array < PatientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'specialists' ? Array < SpecialistGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'role' ? RoleGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'patients' ? Array < PatientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'specialists' ? Array < SpecialistGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const userWithEmailOnly = await prisma.user.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends RoleArgs = {}>(args?: Subset<T, RoleArgs>): CheckSelect<T, Prisma__RoleClient<Role | Null>, Prisma__RoleClient<RoleGetPayload<T> | Null>>;

    patients<T extends PatientFindManyArgs = {}>(args?: Subset<T, PatientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Patient>| Null>, PrismaPromise<Array<PatientGetPayload<T>>| Null>>;

    specialists<T extends SpecialistFindManyArgs = {}>(args?: Subset<T, SpecialistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Specialist>| Null>, PrismaPromise<Array<SpecialistGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Patient
   */


  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    _all?: true
  }

  export type PatientAggregateArgs = {
    /**
     * Filter which Patient to aggregate.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs = {
    where?: PatientWhereInput
    orderBy?: Enumerable<PatientOrderByWithAggregationInput>
    by: Array<PatientScalarFieldEnum>
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }


  export type PatientGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    email: string
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    user?: boolean | UserArgs
    email?: boolean
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }

  export type PatientInclude = {
    user?: boolean | UserArgs
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }

  export type PatientGetPayload<
    S extends boolean | null | undefined | PatientArgs,
    U = keyof S
      > = S extends true
        ? Patient
    : S extends undefined
    ? never
    : S extends PatientArgs | PatientFindManyArgs
    ?'include' extends U
    ? Patient  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PatientCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PatientCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Patient ? Patient[P] : never
  } 
    : Patient
  : Patient


  type PatientCountArgs = Merge<
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }
  >

  export interface PatientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PatientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null, null>, Prisma__PatientClient<PatientGetPayload<T> | null, null>>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PatientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null, null>, Prisma__PatientClient<PatientGetPayload<T> | null, null>>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs>(
      args?: SelectSubset<T, PatientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs>(
      args: SelectSubset<T, PatientCreateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs>(
      args?: SelectSubset<T, PatientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs>(
      args: SelectSubset<T, PatientDeleteArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs>(
      args: SelectSubset<T, PatientUpdateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs>(
      args?: SelectSubset<T, PatientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs>(
      args: SelectSubset<T, PatientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs>(
      args: SelectSubset<T, PatientUpsertArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Find one Patient that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PatientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Find the first Patient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PatientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PatientClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    appointments<T extends AppointmentFindManyArgs = {}>(args?: Subset<T, AppointmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointment>| Null>, PrismaPromise<Array<AppointmentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Patient base type for findUnique actions
   */
  export type PatientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where: PatientWhereUniqueInput
  }

  /**
   * Patient: findUnique
   */
  export interface PatientFindUniqueArgs extends PatientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Patient base type for findFirst actions
   */
  export type PatientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     * 
    **/
    distinct?: Enumerable<PatientScalarFieldEnum>
  }

  /**
   * Patient: findFirst
   */
  export interface PatientFindFirstArgs extends PatientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter, which Patients to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to create a Patient.
     * 
    **/
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs = {
    /**
     * The data used to create many Patients.
     * 
    **/
    data: Enumerable<PatientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to update a Patient.
     * 
    **/
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs = {
    /**
     * The data used to update Patients.
     * 
    **/
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     * 
    **/
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The filter to search for the Patient to update in case it exists.
     * 
    **/
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     * 
    **/
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter which Patient to delete.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs = {
    /**
     * Filter which Patients to delete
     * 
    **/
    where?: PatientWhereInput
  }


  /**
   * Patient: findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs = PatientFindUniqueArgsBase
      

  /**
   * Patient: findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs = PatientFindFirstArgsBase
      

  /**
   * Patient without action
   */
  export type PatientArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
  }



  /**
   * Model Specialization
   */


  export type AggregateSpecialization = {
    _count: SpecializationCountAggregateOutputType | null
    _avg: SpecializationAvgAggregateOutputType | null
    _sum: SpecializationSumAggregateOutputType | null
    _min: SpecializationMinAggregateOutputType | null
    _max: SpecializationMaxAggregateOutputType | null
  }

  export type SpecializationAvgAggregateOutputType = {
    id: number | null
  }

  export type SpecializationSumAggregateOutputType = {
    id: number | null
  }

  export type SpecializationMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type SpecializationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type SpecializationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type SpecializationAvgAggregateInputType = {
    id?: true
  }

  export type SpecializationSumAggregateInputType = {
    id?: true
  }

  export type SpecializationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type SpecializationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type SpecializationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type SpecializationAggregateArgs = {
    /**
     * Filter which Specialization to aggregate.
     * 
    **/
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecializationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specializations
    **/
    _count?: true | SpecializationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecializationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecializationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecializationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecializationMaxAggregateInputType
  }

  export type GetSpecializationAggregateType<T extends SpecializationAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialization[P]>
      : GetScalarType<T[P], AggregateSpecialization[P]>
  }




  export type SpecializationGroupByArgs = {
    where?: SpecializationWhereInput
    orderBy?: Enumerable<SpecializationOrderByWithAggregationInput>
    by: Array<SpecializationScalarFieldEnum>
    having?: SpecializationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecializationCountAggregateInputType | true
    _avg?: SpecializationAvgAggregateInputType
    _sum?: SpecializationSumAggregateInputType
    _min?: SpecializationMinAggregateInputType
    _max?: SpecializationMaxAggregateInputType
  }


  export type SpecializationGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: SpecializationCountAggregateOutputType | null
    _avg: SpecializationAvgAggregateOutputType | null
    _sum: SpecializationSumAggregateOutputType | null
    _min: SpecializationMinAggregateOutputType | null
    _max: SpecializationMaxAggregateOutputType | null
  }

  type GetSpecializationGroupByPayload<T extends SpecializationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecializationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecializationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecializationGroupByOutputType[P]>
            : GetScalarType<T[P], SpecializationGroupByOutputType[P]>
        }
      >
    >


  export type SpecializationSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    specialists?: boolean | SpecialistFindManyArgs
    keywords?: boolean | KeywordFindManyArgs
    _count?: boolean | SpecializationCountOutputTypeArgs
  }

  export type SpecializationInclude = {
    specialists?: boolean | SpecialistFindManyArgs
    keywords?: boolean | KeywordFindManyArgs
    _count?: boolean | SpecializationCountOutputTypeArgs
  }

  export type SpecializationGetPayload<
    S extends boolean | null | undefined | SpecializationArgs,
    U = keyof S
      > = S extends true
        ? Specialization
    : S extends undefined
    ? never
    : S extends SpecializationArgs | SpecializationFindManyArgs
    ?'include' extends U
    ? Specialization  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'keywords' ? Array < KeywordGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? SpecializationCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'keywords' ? Array < KeywordGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? SpecializationCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Specialization ? Specialization[P] : never
  } 
    : Specialization
  : Specialization


  type SpecializationCountArgs = Merge<
    Omit<SpecializationFindManyArgs, 'select' | 'include'> & {
      select?: SpecializationCountAggregateInputType | true
    }
  >

  export interface SpecializationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Specialization that matches the filter.
     * @param {SpecializationFindUniqueArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecializationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecializationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Specialization'> extends True ? CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>> : CheckSelect<T, Prisma__SpecializationClient<Specialization | null, null>, Prisma__SpecializationClient<SpecializationGetPayload<T> | null, null>>

    /**
     * Find the first Specialization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindFirstArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecializationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecializationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Specialization'> extends True ? CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>> : CheckSelect<T, Prisma__SpecializationClient<Specialization | null, null>, Prisma__SpecializationClient<SpecializationGetPayload<T> | null, null>>

    /**
     * Find zero or more Specializations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specializations
     * const specializations = await prisma.specialization.findMany()
     * 
     * // Get first 10 Specializations
     * const specializations = await prisma.specialization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specializationWithIdOnly = await prisma.specialization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecializationFindManyArgs>(
      args?: SelectSubset<T, SpecializationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Specialization>>, PrismaPromise<Array<SpecializationGetPayload<T>>>>

    /**
     * Create a Specialization.
     * @param {SpecializationCreateArgs} args - Arguments to create a Specialization.
     * @example
     * // Create one Specialization
     * const Specialization = await prisma.specialization.create({
     *   data: {
     *     // ... data to create a Specialization
     *   }
     * })
     * 
    **/
    create<T extends SpecializationCreateArgs>(
      args: SelectSubset<T, SpecializationCreateArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Create many Specializations.
     *     @param {SpecializationCreateManyArgs} args - Arguments to create many Specializations.
     *     @example
     *     // Create many Specializations
     *     const specialization = await prisma.specialization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecializationCreateManyArgs>(
      args?: SelectSubset<T, SpecializationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Specialization.
     * @param {SpecializationDeleteArgs} args - Arguments to delete one Specialization.
     * @example
     * // Delete one Specialization
     * const Specialization = await prisma.specialization.delete({
     *   where: {
     *     // ... filter to delete one Specialization
     *   }
     * })
     * 
    **/
    delete<T extends SpecializationDeleteArgs>(
      args: SelectSubset<T, SpecializationDeleteArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Update one Specialization.
     * @param {SpecializationUpdateArgs} args - Arguments to update one Specialization.
     * @example
     * // Update one Specialization
     * const specialization = await prisma.specialization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecializationUpdateArgs>(
      args: SelectSubset<T, SpecializationUpdateArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Delete zero or more Specializations.
     * @param {SpecializationDeleteManyArgs} args - Arguments to filter Specializations to delete.
     * @example
     * // Delete a few Specializations
     * const { count } = await prisma.specialization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecializationDeleteManyArgs>(
      args?: SelectSubset<T, SpecializationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specializations
     * const specialization = await prisma.specialization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecializationUpdateManyArgs>(
      args: SelectSubset<T, SpecializationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Specialization.
     * @param {SpecializationUpsertArgs} args - Arguments to update or create a Specialization.
     * @example
     * // Update or create a Specialization
     * const specialization = await prisma.specialization.upsert({
     *   create: {
     *     // ... data to create a Specialization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specialization we want to update
     *   }
     * })
    **/
    upsert<T extends SpecializationUpsertArgs>(
      args: SelectSubset<T, SpecializationUpsertArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Find one Specialization that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SpecializationFindUniqueOrThrowArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecializationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecializationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Find the first Specialization that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationFindFirstOrThrowArgs} args - Arguments to find a Specialization
     * @example
     * // Get one Specialization
     * const specialization = await prisma.specialization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecializationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecializationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecializationClient<Specialization>, Prisma__SpecializationClient<SpecializationGetPayload<T>>>

    /**
     * Count the number of Specializations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationCountArgs} args - Arguments to filter Specializations to count.
     * @example
     * // Count the number of Specializations
     * const count = await prisma.specialization.count({
     *   where: {
     *     // ... the filter for the Specializations we want to count
     *   }
     * })
    **/
    count<T extends SpecializationCountArgs>(
      args?: Subset<T, SpecializationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecializationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecializationAggregateArgs>(args: Subset<T, SpecializationAggregateArgs>): PrismaPromise<GetSpecializationAggregateType<T>>

    /**
     * Group by Specialization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecializationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecializationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecializationGroupByArgs['orderBy'] }
        : { orderBy?: SpecializationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecializationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecializationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Specialization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecializationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialists<T extends SpecialistFindManyArgs = {}>(args?: Subset<T, SpecialistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Specialist>| Null>, PrismaPromise<Array<SpecialistGetPayload<T>>| Null>>;

    keywords<T extends KeywordFindManyArgs = {}>(args?: Subset<T, KeywordFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Keyword>| Null>, PrismaPromise<Array<KeywordGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Specialization base type for findUnique actions
   */
  export type SpecializationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * Filter, which Specialization to fetch.
     * 
    **/
    where: SpecializationWhereUniqueInput
  }

  /**
   * Specialization: findUnique
   */
  export interface SpecializationFindUniqueArgs extends SpecializationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialization base type for findFirst actions
   */
  export type SpecializationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * Filter, which Specialization to fetch.
     * 
    **/
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecializationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specializations.
     * 
    **/
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specializations.
     * 
    **/
    distinct?: Enumerable<SpecializationScalarFieldEnum>
  }

  /**
   * Specialization: findFirst
   */
  export interface SpecializationFindFirstArgs extends SpecializationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialization findMany
   */
  export type SpecializationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * Filter, which Specializations to fetch.
     * 
    **/
    where?: SpecializationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specializations to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecializationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specializations.
     * 
    **/
    cursor?: SpecializationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specializations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specializations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecializationScalarFieldEnum>
  }


  /**
   * Specialization create
   */
  export type SpecializationCreateArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * The data needed to create a Specialization.
     * 
    **/
    data: XOR<SpecializationCreateInput, SpecializationUncheckedCreateInput>
  }


  /**
   * Specialization createMany
   */
  export type SpecializationCreateManyArgs = {
    /**
     * The data used to create many Specializations.
     * 
    **/
    data: Enumerable<SpecializationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Specialization update
   */
  export type SpecializationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * The data needed to update a Specialization.
     * 
    **/
    data: XOR<SpecializationUpdateInput, SpecializationUncheckedUpdateInput>
    /**
     * Choose, which Specialization to update.
     * 
    **/
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization updateMany
   */
  export type SpecializationUpdateManyArgs = {
    /**
     * The data used to update Specializations.
     * 
    **/
    data: XOR<SpecializationUpdateManyMutationInput, SpecializationUncheckedUpdateManyInput>
    /**
     * Filter which Specializations to update
     * 
    **/
    where?: SpecializationWhereInput
  }


  /**
   * Specialization upsert
   */
  export type SpecializationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * The filter to search for the Specialization to update in case it exists.
     * 
    **/
    where: SpecializationWhereUniqueInput
    /**
     * In case the Specialization found by the `where` argument doesn't exist, create a new Specialization with this data.
     * 
    **/
    create: XOR<SpecializationCreateInput, SpecializationUncheckedCreateInput>
    /**
     * In case the Specialization was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecializationUpdateInput, SpecializationUncheckedUpdateInput>
  }


  /**
   * Specialization delete
   */
  export type SpecializationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
    /**
     * Filter which Specialization to delete.
     * 
    **/
    where: SpecializationWhereUniqueInput
  }


  /**
   * Specialization deleteMany
   */
  export type SpecializationDeleteManyArgs = {
    /**
     * Filter which Specializations to delete
     * 
    **/
    where?: SpecializationWhereInput
  }


  /**
   * Specialization: findUniqueOrThrow
   */
  export type SpecializationFindUniqueOrThrowArgs = SpecializationFindUniqueArgsBase
      

  /**
   * Specialization: findFirstOrThrow
   */
  export type SpecializationFindFirstOrThrowArgs = SpecializationFindFirstArgsBase
      

  /**
   * Specialization without action
   */
  export type SpecializationArgs = {
    /**
     * Select specific fields to fetch from the Specialization
     * 
    **/
    select?: SpecializationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecializationInclude | null
  }



  /**
   * Model Document
   */


  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    specialist_id: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    specialist_id: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    specialist_id: number | null
    path: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    specialist_id: number | null
    path: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    specialist_id: number
    path: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    specialist_id?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    specialist_id?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    specialist_id?: true
    path?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    specialist_id?: true
    path?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    specialist_id?: true
    path?: true
    _all?: true
  }

  export type DocumentAggregateArgs = {
    /**
     * Filter which Document to aggregate.
     * 
    **/
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     * 
    **/
    orderBy?: Enumerable<DocumentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs = {
    where?: DocumentWhereInput
    orderBy?: Enumerable<DocumentOrderByWithAggregationInput>
    by: Array<DocumentScalarFieldEnum>
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }


  export type DocumentGroupByOutputType = {
    id: number
    specialist_id: number
    path: string
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect = {
    id?: boolean
    specialist?: boolean | SpecialistArgs
    specialist_id?: boolean
    path?: boolean
  }

  export type DocumentInclude = {
    specialist?: boolean | SpecialistArgs
  }

  export type DocumentGetPayload<
    S extends boolean | null | undefined | DocumentArgs,
    U = keyof S
      > = S extends true
        ? Document
    : S extends undefined
    ? never
    : S extends DocumentArgs | DocumentFindManyArgs
    ?'include' extends U
    ? Document  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specialist' ? SpecialistGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specialist' ? SpecialistGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Document ? Document[P] : never
  } 
    : Document
  : Document


  type DocumentCountArgs = Merge<
    Omit<DocumentFindManyArgs, 'select' | 'include'> & {
      select?: DocumentCountAggregateInputType | true
    }
  >

  export interface DocumentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DocumentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DocumentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Document'> extends True ? CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>> : CheckSelect<T, Prisma__DocumentClient<Document | null, null>, Prisma__DocumentClient<DocumentGetPayload<T> | null, null>>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DocumentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DocumentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Document'> extends True ? CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>> : CheckSelect<T, Prisma__DocumentClient<Document | null, null>, Prisma__DocumentClient<DocumentGetPayload<T> | null, null>>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DocumentFindManyArgs>(
      args?: SelectSubset<T, DocumentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Document>>, PrismaPromise<Array<DocumentGetPayload<T>>>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
    **/
    create<T extends DocumentCreateArgs>(
      args: SelectSubset<T, DocumentCreateArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Create many Documents.
     *     @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     *     @example
     *     // Create many Documents
     *     const document = await prisma.document.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DocumentCreateManyArgs>(
      args?: SelectSubset<T, DocumentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
    **/
    delete<T extends DocumentDeleteArgs>(
      args: SelectSubset<T, DocumentDeleteArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DocumentUpdateArgs>(
      args: SelectSubset<T, DocumentUpdateArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DocumentDeleteManyArgs>(
      args?: SelectSubset<T, DocumentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DocumentUpdateManyArgs>(
      args: SelectSubset<T, DocumentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
    **/
    upsert<T extends DocumentUpsertArgs>(
      args: SelectSubset<T, DocumentUpsertArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Find one Document that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DocumentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Find the first Document that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DocumentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DocumentClient<Document>, Prisma__DocumentClient<DocumentGetPayload<T>>>

    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DocumentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialist<T extends SpecialistArgs = {}>(args?: Subset<T, SpecialistArgs>): CheckSelect<T, Prisma__SpecialistClient<Specialist | Null>, Prisma__SpecialistClient<SpecialistGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Document base type for findUnique actions
   */
  export type DocumentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * Filter, which Document to fetch.
     * 
    **/
    where: DocumentWhereUniqueInput
  }

  /**
   * Document: findUnique
   */
  export interface DocumentFindUniqueArgs extends DocumentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Document base type for findFirst actions
   */
  export type DocumentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * Filter, which Document to fetch.
     * 
    **/
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     * 
    **/
    orderBy?: Enumerable<DocumentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     * 
    **/
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     * 
    **/
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }

  /**
   * Document: findFirst
   */
  export interface DocumentFindFirstArgs extends DocumentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * Filter, which Documents to fetch.
     * 
    **/
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     * 
    **/
    orderBy?: Enumerable<DocumentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     * 
    **/
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }


  /**
   * Document create
   */
  export type DocumentCreateArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * The data needed to create a Document.
     * 
    **/
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }


  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs = {
    /**
     * The data used to create many Documents.
     * 
    **/
    data: Enumerable<DocumentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Document update
   */
  export type DocumentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * The data needed to update a Document.
     * 
    **/
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     * 
    **/
    where: DocumentWhereUniqueInput
  }


  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs = {
    /**
     * The data used to update Documents.
     * 
    **/
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     * 
    **/
    where?: DocumentWhereInput
  }


  /**
   * Document upsert
   */
  export type DocumentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * The filter to search for the Document to update in case it exists.
     * 
    **/
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     * 
    **/
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }


  /**
   * Document delete
   */
  export type DocumentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
    /**
     * Filter which Document to delete.
     * 
    **/
    where: DocumentWhereUniqueInput
  }


  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs = {
    /**
     * Filter which Documents to delete
     * 
    **/
    where?: DocumentWhereInput
  }


  /**
   * Document: findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs = DocumentFindUniqueArgsBase
      

  /**
   * Document: findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs = DocumentFindFirstArgsBase
      

  /**
   * Document without action
   */
  export type DocumentArgs = {
    /**
     * Select specific fields to fetch from the Document
     * 
    **/
    select?: DocumentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DocumentInclude | null
  }



  /**
   * Model Specialist
   */


  export type AggregateSpecialist = {
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  export type SpecialistAvgAggregateOutputType = {
    id: number | null
    specialization_id: number | null
    price: number | null
  }

  export type SpecialistSumAggregateOutputType = {
    id: number | null
    specialization_id: number | null
    price: number | null
  }

  export type SpecialistMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    specialization_id: number | null
    email: string | null
    price: number | null
    confirmed: boolean | null
  }

  export type SpecialistMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    specialization_id: number | null
    email: string | null
    price: number | null
    confirmed: boolean | null
  }

  export type SpecialistCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    specialization_id: number
    email: number
    price: number
    confirmed: number
    _all: number
  }


  export type SpecialistAvgAggregateInputType = {
    id?: true
    specialization_id?: true
    price?: true
  }

  export type SpecialistSumAggregateInputType = {
    id?: true
    specialization_id?: true
    price?: true
  }

  export type SpecialistMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    specialization_id?: true
    email?: true
    price?: true
    confirmed?: true
  }

  export type SpecialistMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    specialization_id?: true
    email?: true
    price?: true
    confirmed?: true
  }

  export type SpecialistCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    specialization_id?: true
    email?: true
    price?: true
    confirmed?: true
    _all?: true
  }

  export type SpecialistAggregateArgs = {
    /**
     * Filter which Specialist to aggregate.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specialists
    **/
    _count?: true | SpecialistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecialistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecialistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialistMaxAggregateInputType
  }

  export type GetSpecialistAggregateType<T extends SpecialistAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialist[P]>
      : GetScalarType<T[P], AggregateSpecialist[P]>
  }




  export type SpecialistGroupByArgs = {
    where?: SpecialistWhereInput
    orderBy?: Enumerable<SpecialistOrderByWithAggregationInput>
    by: Array<SpecialistScalarFieldEnum>
    having?: SpecialistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialistCountAggregateInputType | true
    _avg?: SpecialistAvgAggregateInputType
    _sum?: SpecialistSumAggregateInputType
    _min?: SpecialistMinAggregateInputType
    _max?: SpecialistMaxAggregateInputType
  }


  export type SpecialistGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    specialization_id: number
    email: string
    price: number
    confirmed: boolean
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  type GetSpecialistGroupByPayload<T extends SpecialistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecialistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
        }
      >
    >


  export type SpecialistSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    specialization?: boolean | SpecializationArgs
    specialization_id?: boolean
    user?: boolean | UserArgs
    email?: boolean
    price?: boolean
    confirmed?: boolean
    appointments?: boolean | AppointmentFindManyArgs
    documents?: boolean | DocumentFindManyArgs
    _count?: boolean | SpecialistCountOutputTypeArgs
  }

  export type SpecialistInclude = {
    specialization?: boolean | SpecializationArgs
    user?: boolean | UserArgs
    appointments?: boolean | AppointmentFindManyArgs
    documents?: boolean | DocumentFindManyArgs
    _count?: boolean | SpecialistCountOutputTypeArgs
  }

  export type SpecialistGetPayload<
    S extends boolean | null | undefined | SpecialistArgs,
    U = keyof S
      > = S extends true
        ? Specialist
    : S extends undefined
    ? never
    : S extends SpecialistArgs | SpecialistFindManyArgs
    ?'include' extends U
    ? Specialist  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specialization' ? SpecializationGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'documents' ? Array < DocumentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? SpecialistCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specialization' ? SpecializationGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'documents' ? Array < DocumentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? SpecialistCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Specialist ? Specialist[P] : never
  } 
    : Specialist
  : Specialist


  type SpecialistCountArgs = Merge<
    Omit<SpecialistFindManyArgs, 'select' | 'include'> & {
      select?: SpecialistCountAggregateInputType | true
    }
  >

  export interface SpecialistDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Specialist that matches the filter.
     * @param {SpecialistFindUniqueArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecialistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecialistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Specialist'> extends True ? CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>> : CheckSelect<T, Prisma__SpecialistClient<Specialist | null, null>, Prisma__SpecialistClient<SpecialistGetPayload<T> | null, null>>

    /**
     * Find the first Specialist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecialistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecialistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Specialist'> extends True ? CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>> : CheckSelect<T, Prisma__SpecialistClient<Specialist | null, null>, Prisma__SpecialistClient<SpecialistGetPayload<T> | null, null>>

    /**
     * Find zero or more Specialists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specialists
     * const specialists = await prisma.specialist.findMany()
     * 
     * // Get first 10 Specialists
     * const specialists = await prisma.specialist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specialistWithIdOnly = await prisma.specialist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecialistFindManyArgs>(
      args?: SelectSubset<T, SpecialistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Specialist>>, PrismaPromise<Array<SpecialistGetPayload<T>>>>

    /**
     * Create a Specialist.
     * @param {SpecialistCreateArgs} args - Arguments to create a Specialist.
     * @example
     * // Create one Specialist
     * const Specialist = await prisma.specialist.create({
     *   data: {
     *     // ... data to create a Specialist
     *   }
     * })
     * 
    **/
    create<T extends SpecialistCreateArgs>(
      args: SelectSubset<T, SpecialistCreateArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Create many Specialists.
     *     @param {SpecialistCreateManyArgs} args - Arguments to create many Specialists.
     *     @example
     *     // Create many Specialists
     *     const specialist = await prisma.specialist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecialistCreateManyArgs>(
      args?: SelectSubset<T, SpecialistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Specialist.
     * @param {SpecialistDeleteArgs} args - Arguments to delete one Specialist.
     * @example
     * // Delete one Specialist
     * const Specialist = await prisma.specialist.delete({
     *   where: {
     *     // ... filter to delete one Specialist
     *   }
     * })
     * 
    **/
    delete<T extends SpecialistDeleteArgs>(
      args: SelectSubset<T, SpecialistDeleteArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Update one Specialist.
     * @param {SpecialistUpdateArgs} args - Arguments to update one Specialist.
     * @example
     * // Update one Specialist
     * const specialist = await prisma.specialist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecialistUpdateArgs>(
      args: SelectSubset<T, SpecialistUpdateArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Delete zero or more Specialists.
     * @param {SpecialistDeleteManyArgs} args - Arguments to filter Specialists to delete.
     * @example
     * // Delete a few Specialists
     * const { count } = await prisma.specialist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecialistDeleteManyArgs>(
      args?: SelectSubset<T, SpecialistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specialists
     * const specialist = await prisma.specialist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecialistUpdateManyArgs>(
      args: SelectSubset<T, SpecialistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Specialist.
     * @param {SpecialistUpsertArgs} args - Arguments to update or create a Specialist.
     * @example
     * // Update or create a Specialist
     * const specialist = await prisma.specialist.upsert({
     *   create: {
     *     // ... data to create a Specialist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specialist we want to update
     *   }
     * })
    **/
    upsert<T extends SpecialistUpsertArgs>(
      args: SelectSubset<T, SpecialistUpsertArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Find one Specialist that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SpecialistFindUniqueOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecialistFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecialistFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Find the first Specialist that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecialistFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecialistFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecialistClient<Specialist>, Prisma__SpecialistClient<SpecialistGetPayload<T>>>

    /**
     * Count the number of Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistCountArgs} args - Arguments to filter Specialists to count.
     * @example
     * // Count the number of Specialists
     * const count = await prisma.specialist.count({
     *   where: {
     *     // ... the filter for the Specialists we want to count
     *   }
     * })
    **/
    count<T extends SpecialistCountArgs>(
      args?: Subset<T, SpecialistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialistAggregateArgs>(args: Subset<T, SpecialistAggregateArgs>): PrismaPromise<GetSpecialistAggregateType<T>>

    /**
     * Group by Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialistGroupByArgs['orderBy'] }
        : { orderBy?: SpecialistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialistGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Specialist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecialistClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialization<T extends SpecializationArgs = {}>(args?: Subset<T, SpecializationArgs>): CheckSelect<T, Prisma__SpecializationClient<Specialization | Null>, Prisma__SpecializationClient<SpecializationGetPayload<T> | Null>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    appointments<T extends AppointmentFindManyArgs = {}>(args?: Subset<T, AppointmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointment>| Null>, PrismaPromise<Array<AppointmentGetPayload<T>>| Null>>;

    documents<T extends DocumentFindManyArgs = {}>(args?: Subset<T, DocumentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Document>| Null>, PrismaPromise<Array<DocumentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Specialist base type for findUnique actions
   */
  export type SpecialistFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }

  /**
   * Specialist: findUnique
   */
  export interface SpecialistFindUniqueArgs extends SpecialistFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialist base type for findFirst actions
   */
  export type SpecialistFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialists.
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialists.
     * 
    **/
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }

  /**
   * Specialist: findFirst
   */
  export interface SpecialistFindFirstArgs extends SpecialistFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialist findMany
   */
  export type SpecialistFindManyArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialists to fetch.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specialists.
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }


  /**
   * Specialist create
   */
  export type SpecialistCreateArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The data needed to create a Specialist.
     * 
    **/
    data: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
  }


  /**
   * Specialist createMany
   */
  export type SpecialistCreateManyArgs = {
    /**
     * The data used to create many Specialists.
     * 
    **/
    data: Enumerable<SpecialistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Specialist update
   */
  export type SpecialistUpdateArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The data needed to update a Specialist.
     * 
    **/
    data: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
    /**
     * Choose, which Specialist to update.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist updateMany
   */
  export type SpecialistUpdateManyArgs = {
    /**
     * The data used to update Specialists.
     * 
    **/
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyInput>
    /**
     * Filter which Specialists to update
     * 
    **/
    where?: SpecialistWhereInput
  }


  /**
   * Specialist upsert
   */
  export type SpecialistUpsertArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The filter to search for the Specialist to update in case it exists.
     * 
    **/
    where: SpecialistWhereUniqueInput
    /**
     * In case the Specialist found by the `where` argument doesn't exist, create a new Specialist with this data.
     * 
    **/
    create: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
    /**
     * In case the Specialist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
  }


  /**
   * Specialist delete
   */
  export type SpecialistDeleteArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter which Specialist to delete.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist deleteMany
   */
  export type SpecialistDeleteManyArgs = {
    /**
     * Filter which Specialists to delete
     * 
    **/
    where?: SpecialistWhereInput
  }


  /**
   * Specialist: findUniqueOrThrow
   */
  export type SpecialistFindUniqueOrThrowArgs = SpecialistFindUniqueArgsBase
      

  /**
   * Specialist: findFirstOrThrow
   */
  export type SpecialistFindFirstOrThrowArgs = SpecialistFindFirstArgsBase
      

  /**
   * Specialist without action
   */
  export type SpecialistArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
  }



  /**
   * Model Keyword
   */


  export type AggregateKeyword = {
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  export type KeywordAvgAggregateOutputType = {
    id: number | null
    specialization_id: number | null
  }

  export type KeywordSumAggregateOutputType = {
    id: number | null
    specialization_id: number | null
  }

  export type KeywordMinAggregateOutputType = {
    id: number | null
    specialization_id: number | null
  }

  export type KeywordMaxAggregateOutputType = {
    id: number | null
    specialization_id: number | null
  }

  export type KeywordCountAggregateOutputType = {
    id: number
    specialization_id: number
    _all: number
  }


  export type KeywordAvgAggregateInputType = {
    id?: true
    specialization_id?: true
  }

  export type KeywordSumAggregateInputType = {
    id?: true
    specialization_id?: true
  }

  export type KeywordMinAggregateInputType = {
    id?: true
    specialization_id?: true
  }

  export type KeywordMaxAggregateInputType = {
    id?: true
    specialization_id?: true
  }

  export type KeywordCountAggregateInputType = {
    id?: true
    specialization_id?: true
    _all?: true
  }

  export type KeywordAggregateArgs = {
    /**
     * Filter which Keyword to aggregate.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keywords
    **/
    _count?: true | KeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordMaxAggregateInputType
  }

  export type GetKeywordAggregateType<T extends KeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyword[P]>
      : GetScalarType<T[P], AggregateKeyword[P]>
  }




  export type KeywordGroupByArgs = {
    where?: KeywordWhereInput
    orderBy?: Enumerable<KeywordOrderByWithAggregationInput>
    by: Array<KeywordScalarFieldEnum>
    having?: KeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordCountAggregateInputType | true
    _avg?: KeywordAvgAggregateInputType
    _sum?: KeywordSumAggregateInputType
    _min?: KeywordMinAggregateInputType
    _max?: KeywordMaxAggregateInputType
  }


  export type KeywordGroupByOutputType = {
    id: number
    specialization_id: number
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  type GetKeywordGroupByPayload<T extends KeywordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordGroupByOutputType[P]>
        }
      >
    >


  export type KeywordSelect = {
    id?: boolean
    specialization?: boolean | SpecializationArgs
    specialization_id?: boolean
  }

  export type KeywordInclude = {
    specialization?: boolean | SpecializationArgs
  }

  export type KeywordGetPayload<
    S extends boolean | null | undefined | KeywordArgs,
    U = keyof S
      > = S extends true
        ? Keyword
    : S extends undefined
    ? never
    : S extends KeywordArgs | KeywordFindManyArgs
    ?'include' extends U
    ? Keyword  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specialization' ? SpecializationGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specialization' ? SpecializationGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Keyword ? Keyword[P] : never
  } 
    : Keyword
  : Keyword


  type KeywordCountArgs = Merge<
    Omit<KeywordFindManyArgs, 'select' | 'include'> & {
      select?: KeywordCountAggregateInputType | true
    }
  >

  export interface KeywordDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Keyword that matches the filter.
     * @param {KeywordFindUniqueArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeywordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeywordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null, null>, Prisma__KeywordClient<KeywordGetPayload<T> | null, null>>

    /**
     * Find the first Keyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeywordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeywordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null, null>, Prisma__KeywordClient<KeywordGetPayload<T> | null, null>>

    /**
     * Find zero or more Keywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keywords
     * const keywords = await prisma.keyword.findMany()
     * 
     * // Get first 10 Keywords
     * const keywords = await prisma.keyword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordWithIdOnly = await prisma.keyword.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeywordFindManyArgs>(
      args?: SelectSubset<T, KeywordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Keyword>>, PrismaPromise<Array<KeywordGetPayload<T>>>>

    /**
     * Create a Keyword.
     * @param {KeywordCreateArgs} args - Arguments to create a Keyword.
     * @example
     * // Create one Keyword
     * const Keyword = await prisma.keyword.create({
     *   data: {
     *     // ... data to create a Keyword
     *   }
     * })
     * 
    **/
    create<T extends KeywordCreateArgs>(
      args: SelectSubset<T, KeywordCreateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Create many Keywords.
     *     @param {KeywordCreateManyArgs} args - Arguments to create many Keywords.
     *     @example
     *     // Create many Keywords
     *     const keyword = await prisma.keyword.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeywordCreateManyArgs>(
      args?: SelectSubset<T, KeywordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Keyword.
     * @param {KeywordDeleteArgs} args - Arguments to delete one Keyword.
     * @example
     * // Delete one Keyword
     * const Keyword = await prisma.keyword.delete({
     *   where: {
     *     // ... filter to delete one Keyword
     *   }
     * })
     * 
    **/
    delete<T extends KeywordDeleteArgs>(
      args: SelectSubset<T, KeywordDeleteArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Update one Keyword.
     * @param {KeywordUpdateArgs} args - Arguments to update one Keyword.
     * @example
     * // Update one Keyword
     * const keyword = await prisma.keyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeywordUpdateArgs>(
      args: SelectSubset<T, KeywordUpdateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Delete zero or more Keywords.
     * @param {KeywordDeleteManyArgs} args - Arguments to filter Keywords to delete.
     * @example
     * // Delete a few Keywords
     * const { count } = await prisma.keyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeywordDeleteManyArgs>(
      args?: SelectSubset<T, KeywordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeywordUpdateManyArgs>(
      args: SelectSubset<T, KeywordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Keyword.
     * @param {KeywordUpsertArgs} args - Arguments to update or create a Keyword.
     * @example
     * // Update or create a Keyword
     * const keyword = await prisma.keyword.upsert({
     *   create: {
     *     // ... data to create a Keyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyword we want to update
     *   }
     * })
    **/
    upsert<T extends KeywordUpsertArgs>(
      args: SelectSubset<T, KeywordUpsertArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Find one Keyword that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {KeywordFindUniqueOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeywordFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KeywordFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Find the first Keyword that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeywordFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KeywordFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Count the number of Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordCountArgs} args - Arguments to filter Keywords to count.
     * @example
     * // Count the number of Keywords
     * const count = await prisma.keyword.count({
     *   where: {
     *     // ... the filter for the Keywords we want to count
     *   }
     * })
    **/
    count<T extends KeywordCountArgs>(
      args?: Subset<T, KeywordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordAggregateArgs>(args: Subset<T, KeywordAggregateArgs>): PrismaPromise<GetKeywordAggregateType<T>>

    /**
     * Group by Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordGroupByArgs['orderBy'] }
        : { orderBy?: KeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeywordClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialization<T extends SpecializationArgs = {}>(args?: Subset<T, SpecializationArgs>): CheckSelect<T, Prisma__SpecializationClient<Specialization | Null>, Prisma__SpecializationClient<SpecializationGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Keyword base type for findUnique actions
   */
  export type KeywordFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword: findUnique
   */
  export interface KeywordFindUniqueArgs extends KeywordFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Keyword base type for findFirst actions
   */
  export type KeywordFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     * 
    **/
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }

  /**
   * Keyword: findFirst
   */
  export interface KeywordFindFirstArgs extends KeywordFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Keyword findMany
   */
  export type KeywordFindManyArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keywords to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }


  /**
   * Keyword create
   */
  export type KeywordCreateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to create a Keyword.
     * 
    **/
    data: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
  }


  /**
   * Keyword createMany
   */
  export type KeywordCreateManyArgs = {
    /**
     * The data used to create many Keywords.
     * 
    **/
    data: Enumerable<KeywordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Keyword update
   */
  export type KeywordUpdateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to update a Keyword.
     * 
    **/
    data: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
    /**
     * Choose, which Keyword to update.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword updateMany
   */
  export type KeywordUpdateManyArgs = {
    /**
     * The data used to update Keywords.
     * 
    **/
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword upsert
   */
  export type KeywordUpsertArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The filter to search for the Keyword to update in case it exists.
     * 
    **/
    where: KeywordWhereUniqueInput
    /**
     * In case the Keyword found by the `where` argument doesn't exist, create a new Keyword with this data.
     * 
    **/
    create: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
    /**
     * In case the Keyword was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
  }


  /**
   * Keyword delete
   */
  export type KeywordDeleteArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter which Keyword to delete.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword deleteMany
   */
  export type KeywordDeleteManyArgs = {
    /**
     * Filter which Keywords to delete
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword: findUniqueOrThrow
   */
  export type KeywordFindUniqueOrThrowArgs = KeywordFindUniqueArgsBase
      

  /**
   * Keyword: findFirstOrThrow
   */
  export type KeywordFindFirstOrThrowArgs = KeywordFindFirstArgsBase
      

  /**
   * Keyword without action
   */
  export type KeywordArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
  }



  /**
   * Model Rating
   */


  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    count_rated: number | null
    rating: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    count_rated: number | null
    rating: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    reviews: string | null
    count_rated: number | null
    rating: number | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    reviews: string | null
    count_rated: number | null
    rating: number | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    appointment_id: number
    reviews: number
    count_rated: number
    rating: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    appointment_id?: true
    count_rated?: true
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    appointment_id?: true
    count_rated?: true
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    appointment_id?: true
    reviews?: true
    count_rated?: true
    rating?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    appointment_id?: true
    reviews?: true
    count_rated?: true
    rating?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    appointment_id?: true
    reviews?: true
    count_rated?: true
    rating?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which Rating to aggregate.
     * 
    **/
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     * 
    **/
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs = {
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithAggregationInput>
    by: Array<RatingScalarFieldEnum>
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }


  export type RatingGroupByOutputType = {
    id: number
    appointment_id: number
    reviews: string
    count_rated: number
    rating: number
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect = {
    id?: boolean
    appointment?: boolean | AppointmentArgs
    appointment_id?: boolean
    reviews?: boolean
    count_rated?: boolean
    rating?: boolean
  }

  export type RatingInclude = {
    appointment?: boolean | AppointmentArgs
  }

  export type RatingGetPayload<
    S extends boolean | null | undefined | RatingArgs,
    U = keyof S
      > = S extends true
        ? Rating
    : S extends undefined
    ? never
    : S extends RatingArgs | RatingFindManyArgs
    ?'include' extends U
    ? Rating  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appointment' ? AppointmentGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appointment' ? AppointmentGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Rating ? Rating[P] : never
  } 
    : Rating
  : Rating


  type RatingCountArgs = Merge<
    Omit<RatingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }
  >

  export interface RatingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RatingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rating'> extends True ? CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>> : CheckSelect<T, Prisma__RatingClient<Rating | null, null>, Prisma__RatingClient<RatingGetPayload<T> | null, null>>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RatingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rating'> extends True ? CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>> : CheckSelect<T, Prisma__RatingClient<Rating | null, null>, Prisma__RatingClient<RatingGetPayload<T> | null, null>>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs>(
      args?: SelectSubset<T, RatingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Rating>>, PrismaPromise<Array<RatingGetPayload<T>>>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs>(
      args: SelectSubset<T, RatingCreateArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs>(
      args?: SelectSubset<T, RatingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs>(
      args: SelectSubset<T, RatingDeleteArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs>(
      args: SelectSubset<T, RatingUpdateArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs>(
      args?: SelectSubset<T, RatingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs>(
      args: SelectSubset<T, RatingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs>(
      args: SelectSubset<T, RatingUpsertArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Find one Rating that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Find the first Rating that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RatingClient<Rating>, Prisma__RatingClient<RatingGetPayload<T>>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RatingClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointment<T extends AppointmentArgs = {}>(args?: Subset<T, AppointmentArgs>): CheckSelect<T, Prisma__AppointmentClient<Appointment | Null>, Prisma__AppointmentClient<AppointmentGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rating base type for findUnique actions
   */
  export type RatingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     * 
    **/
    where: RatingWhereUniqueInput
  }

  /**
   * Rating: findUnique
   */
  export interface RatingFindUniqueArgs extends RatingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating base type for findFirst actions
   */
  export type RatingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     * 
    **/
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     * 
    **/
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     * 
    **/
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     * 
    **/
    distinct?: Enumerable<RatingScalarFieldEnum>
  }

  /**
   * Rating: findFirst
   */
  export interface RatingFindFirstArgs extends RatingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * Filter, which Ratings to fetch.
     * 
    **/
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     * 
    **/
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     * 
    **/
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * The data needed to create a Rating.
     * 
    **/
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs = {
    /**
     * The data used to create many Ratings.
     * 
    **/
    data: Enumerable<RatingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * The data needed to update a Rating.
     * 
    **/
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     * 
    **/
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs = {
    /**
     * The data used to update Ratings.
     * 
    **/
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     * 
    **/
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * The filter to search for the Rating to update in case it exists.
     * 
    **/
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     * 
    **/
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
    /**
     * Filter which Rating to delete.
     * 
    **/
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs = {
    /**
     * Filter which Ratings to delete
     * 
    **/
    where?: RatingWhereInput
  }


  /**
   * Rating: findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs = RatingFindUniqueArgsBase
      

  /**
   * Rating: findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs = RatingFindFirstArgsBase
      

  /**
   * Rating without action
   */
  export type RatingArgs = {
    /**
     * Select specific fields to fetch from the Rating
     * 
    **/
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RatingInclude | null
  }



  /**
   * Model Payment
   */


  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    amount: number | null
    bill_number: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    amount: number | null
    bill_number: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    amount: number | null
    date: Date | null
    bill_number: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    appointment_id: number | null
    amount: number | null
    date: Date | null
    bill_number: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    appointment_id: number
    amount: number
    date: number
    bill_number: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    appointment_id?: true
    amount?: true
    bill_number?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    appointment_id?: true
    amount?: true
    bill_number?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    appointment_id?: true
    amount?: true
    date?: true
    bill_number?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    appointment_id?: true
    amount?: true
    date?: true
    bill_number?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    appointment_id?: true
    amount?: true
    date?: true
    bill_number?: true
    _all?: true
  }

  export type PaymentAggregateArgs = {
    /**
     * Filter which Payment to aggregate.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs = {
    where?: PaymentWhereInput
    orderBy?: Enumerable<PaymentOrderByWithAggregationInput>
    by: Array<PaymentScalarFieldEnum>
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }


  export type PaymentGroupByOutputType = {
    id: number
    appointment_id: number
    amount: number
    date: Date
    bill_number: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect = {
    id?: boolean
    appointment?: boolean | AppointmentArgs
    appointment_id?: boolean
    amount?: boolean
    date?: boolean
    bill_number?: boolean
  }

  export type PaymentInclude = {
    appointment?: boolean | AppointmentArgs
  }

  export type PaymentGetPayload<
    S extends boolean | null | undefined | PaymentArgs,
    U = keyof S
      > = S extends true
        ? Payment
    : S extends undefined
    ? never
    : S extends PaymentArgs | PaymentFindManyArgs
    ?'include' extends U
    ? Payment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appointment' ? AppointmentGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appointment' ? AppointmentGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Payment ? Payment[P] : never
  } 
    : Payment
  : Payment


  type PaymentCountArgs = Merge<
    Omit<PaymentFindManyArgs, 'select' | 'include'> & {
      select?: PaymentCountAggregateInputType | true
    }
  >

  export interface PaymentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PaymentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null, null>, Prisma__PaymentClient<PaymentGetPayload<T> | null, null>>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PaymentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null, null>, Prisma__PaymentClient<PaymentGetPayload<T> | null, null>>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs>(
      args?: SelectSubset<T, PaymentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Payment>>, PrismaPromise<Array<PaymentGetPayload<T>>>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs>(
      args: SelectSubset<T, PaymentCreateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs>(
      args?: SelectSubset<T, PaymentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs>(
      args: SelectSubset<T, PaymentDeleteArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs>(
      args: SelectSubset<T, PaymentUpdateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs>(
      args?: SelectSubset<T, PaymentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs>(
      args: SelectSubset<T, PaymentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs>(
      args: SelectSubset<T, PaymentUpsertArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Find one Payment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PaymentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Find the first Payment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PaymentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PaymentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointment<T extends AppointmentArgs = {}>(args?: Subset<T, AppointmentArgs>): CheckSelect<T, Prisma__AppointmentClient<Appointment | Null>, Prisma__AppointmentClient<AppointmentGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Payment base type for findUnique actions
   */
  export type PaymentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment: findUnique
   */
  export interface PaymentFindUniqueArgs extends PaymentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Payment base type for findFirst actions
   */
  export type PaymentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     * 
    **/
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }

  /**
   * Payment: findFirst
   */
  export interface PaymentFindFirstArgs extends PaymentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter, which Payments to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to create a Payment.
     * 
    **/
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs = {
    /**
     * The data used to create many Payments.
     * 
    **/
    data: Enumerable<PaymentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to update a Payment.
     * 
    **/
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs = {
    /**
     * The data used to update Payments.
     * 
    **/
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The filter to search for the Payment to update in case it exists.
     * 
    **/
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     * 
    **/
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter which Payment to delete.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs = {
    /**
     * Filter which Payments to delete
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment: findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs = PaymentFindUniqueArgsBase
      

  /**
   * Payment: findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs = PaymentFindFirstArgsBase
      

  /**
   * Payment without action
   */
  export type PaymentArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
  }



  /**
   * Model Room
   */


  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoomAggregateArgs = {
    /**
     * Filter which Room to aggregate.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs = {
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithAggregationInput>
    by: Array<RoomScalarFieldEnum>
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }


  export type RoomGroupByOutputType = {
    id: number
    name: string
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect = {
    id?: boolean
    name?: boolean
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomInclude = {
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomGetPayload<
    S extends boolean | null | undefined | RoomArgs,
    U = keyof S
      > = S extends true
        ? Room
    : S extends undefined
    ? never
    : S extends RoomArgs | RoomFindManyArgs
    ?'include' extends U
    ? Room  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appointments' ? Array < AppointmentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Room ? Room[P] : never
  } 
    : Room
  : Room


  type RoomCountArgs = Merge<
    Omit<RoomFindManyArgs, 'select' | 'include'> & {
      select?: RoomCountAggregateInputType | true
    }
  >

  export interface RoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null, null>, Prisma__RoomClient<RoomGetPayload<T> | null, null>>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null, null>, Prisma__RoomClient<RoomGetPayload<T> | null, null>>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Room>>, PrismaPromise<Array<RoomGetPayload<T>>>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find one Room that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find the first Room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointments<T extends AppointmentFindManyArgs = {}>(args?: Subset<T, AppointmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointment>| Null>, PrismaPromise<Array<AppointmentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Room base type for findUnique actions
   */
  export type RoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where: RoomWhereUniqueInput
  }

  /**
   * Room: findUnique
   */
  export interface RoomFindUniqueArgs extends RoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room base type for findFirst actions
   */
  export type RoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     * 
    **/
    distinct?: Enumerable<RoomScalarFieldEnum>
  }

  /**
   * Room: findFirst
   */
  export interface RoomFindFirstArgs extends RoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findMany
   */
  export type RoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Rooms to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room create
   */
  export type RoomCreateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to create a Room.
     * 
    **/
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs = {
    /**
     * The data used to create many Rooms.
     * 
    **/
    data: Enumerable<RoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to update a Room.
     * 
    **/
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs = {
    /**
     * The data used to update Rooms.
     * 
    **/
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The filter to search for the Room to update in case it exists.
     * 
    **/
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     * 
    **/
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter which Room to delete.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs = {
    /**
     * Filter which Rooms to delete
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room: findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs = RoomFindUniqueArgsBase
      

  /**
   * Room: findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs = RoomFindFirstArgsBase
      

  /**
   * Room without action
   */
  export type RoomArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
  }



  /**
   * Model Appointment
   */


  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    patient_id: number | null
    specialist_id: number | null
    room_id: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    patient_id: number | null
    specialist_id: number | null
    room_id: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    patient_id: number | null
    specialist_id: number | null
    room_id: number | null
    appointed_at: Date | null
    end_time: Date | null
    comments: string | null
    approved: boolean | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    patient_id: number | null
    specialist_id: number | null
    room_id: number | null
    appointed_at: Date | null
    end_time: Date | null
    comments: string | null
    approved: boolean | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: number
    end_time: number
    comments: number
    approved: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    patient_id?: true
    specialist_id?: true
    room_id?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    patient_id?: true
    specialist_id?: true
    room_id?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    patient_id?: true
    specialist_id?: true
    room_id?: true
    appointed_at?: true
    end_time?: true
    comments?: true
    approved?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patient_id?: true
    specialist_id?: true
    room_id?: true
    appointed_at?: true
    end_time?: true
    comments?: true
    approved?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patient_id?: true
    specialist_id?: true
    room_id?: true
    appointed_at?: true
    end_time?: true
    comments?: true
    approved?: true
    _all?: true
  }

  export type AppointmentAggregateArgs = {
    /**
     * Filter which Appointment to aggregate.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs = {
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithAggregationInput>
    by: Array<AppointmentScalarFieldEnum>
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }


  export type AppointmentGroupByOutputType = {
    id: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: Date
    end_time: Date
    comments: string
    approved: boolean
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect = {
    id?: boolean
    patient?: boolean | PatientArgs
    patient_id?: boolean
    specialist?: boolean | SpecialistArgs
    specialist_id?: boolean
    room?: boolean | RoomArgs
    room_id?: boolean
    appointed_at?: boolean
    end_time?: boolean
    comments?: boolean
    approved?: boolean
    ratings?: boolean | RatingFindManyArgs
    payments?: boolean | PaymentFindManyArgs
    _count?: boolean | AppointmentCountOutputTypeArgs
  }

  export type AppointmentInclude = {
    patient?: boolean | PatientArgs
    specialist?: boolean | SpecialistArgs
    room?: boolean | RoomArgs
    ratings?: boolean | RatingFindManyArgs
    payments?: boolean | PaymentFindManyArgs
    _count?: boolean | AppointmentCountOutputTypeArgs
  }

  export type AppointmentGetPayload<
    S extends boolean | null | undefined | AppointmentArgs,
    U = keyof S
      > = S extends true
        ? Appointment
    : S extends undefined
    ? never
    : S extends AppointmentArgs | AppointmentFindManyArgs
    ?'include' extends U
    ? Appointment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'patient' ? PatientGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'specialist' ? SpecialistGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'ratings' ? Array < RatingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'payments' ? Array < PaymentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AppointmentCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'patient' ? PatientGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'specialist' ? SpecialistGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'ratings' ? Array < RatingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'payments' ? Array < PaymentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AppointmentCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Appointment ? Appointment[P] : never
  } 
    : Appointment
  : Appointment


  type AppointmentCountArgs = Merge<
    Omit<AppointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }
  >

  export interface AppointmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Appointment'> extends True ? CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentClient<Appointment | null, null>, Prisma__AppointmentClient<AppointmentGetPayload<T> | null, null>>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Appointment'> extends True ? CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentClient<Appointment | null, null>, Prisma__AppointmentClient<AppointmentGetPayload<T> | null, null>>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs>(
      args?: SelectSubset<T, AppointmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Appointment>>, PrismaPromise<Array<AppointmentGetPayload<T>>>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs>(
      args: SelectSubset<T, AppointmentCreateArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Create many Appointments.
     *     @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs>(
      args?: SelectSubset<T, AppointmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs>(
      args: SelectSubset<T, AppointmentDeleteArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs>(
      args: SelectSubset<T, AppointmentUpdateArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs>(
      args: SelectSubset<T, AppointmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs>(
      args: SelectSubset<T, AppointmentUpsertArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Find one Appointment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppointmentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Find the first Appointment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointmentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    patient<T extends PatientArgs = {}>(args?: Subset<T, PatientArgs>): CheckSelect<T, Prisma__PatientClient<Patient | Null>, Prisma__PatientClient<PatientGetPayload<T> | Null>>;

    specialist<T extends SpecialistArgs = {}>(args?: Subset<T, SpecialistArgs>): CheckSelect<T, Prisma__SpecialistClient<Specialist | Null>, Prisma__SpecialistClient<SpecialistGetPayload<T> | Null>>;

    room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | Null>, Prisma__RoomClient<RoomGetPayload<T> | Null>>;

    ratings<T extends RatingFindManyArgs = {}>(args?: Subset<T, RatingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Rating>| Null>, PrismaPromise<Array<RatingGetPayload<T>>| Null>>;

    payments<T extends PaymentFindManyArgs = {}>(args?: Subset<T, PaymentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Payment>| Null>, PrismaPromise<Array<PaymentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Appointment base type for findUnique actions
   */
  export type AppointmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment: findUnique
   */
  export interface AppointmentFindUniqueArgs extends AppointmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment base type for findFirst actions
   */
  export type AppointmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     * 
    **/
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }

  /**
   * Appointment: findFirst
   */
  export interface AppointmentFindFirstArgs extends AppointmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointments to fetch.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment create
   */
  export type AppointmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The data needed to create a Appointment.
     * 
    **/
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }


  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs = {
    /**
     * The data used to create many Appointments.
     * 
    **/
    data: Enumerable<AppointmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The data needed to update a Appointment.
     * 
    **/
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs = {
    /**
     * The data used to update Appointments.
     * 
    **/
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     * 
    **/
    where?: AppointmentWhereInput
  }


  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     * 
    **/
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     * 
    **/
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }


  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter which Appointment to delete.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs = {
    /**
     * Filter which Appointments to delete
     * 
    **/
    where?: AppointmentWhereInput
  }


  /**
   * Appointment: findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs = AppointmentFindUniqueArgsBase
      

  /**
   * Appointment: findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs = AppointmentFindFirstArgsBase
      

  /**
   * Appointment without action
   */
  export type AppointmentArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patient_id: 'patient_id',
    specialist_id: 'specialist_id',
    room_id: 'room_id',
    appointed_at: 'appointed_at',
    end_time: 'end_time',
    comments: 'comments',
    approved: 'approved'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    specialist_id: 'specialist_id',
    path: 'path'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const KeywordScalarFieldEnum: {
    id: 'id',
    specialization_id: 'specialization_id'
  };

  export type KeywordScalarFieldEnum = (typeof KeywordScalarFieldEnum)[keyof typeof KeywordScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    appointment_id: 'appointment_id',
    amount: 'amount',
    date: 'date',
    bill_number: 'bill_number'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RatingScalarFieldEnum: {
    id: 'id',
    appointment_id: 'appointment_id',
    reviews: 'reviews',
    count_rated: 'count_rated',
    rating: 'rating'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SpecialistScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    specialization_id: 'specialization_id',
    email: 'email',
    price: 'price',
    confirmed: 'confirmed'
  };

  export type SpecialistScalarFieldEnum = (typeof SpecialistScalarFieldEnum)[keyof typeof SpecialistScalarFieldEnum]


  export const SpecializationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type SpecializationScalarFieldEnum = (typeof SpecializationScalarFieldEnum)[keyof typeof SpecializationScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    email: 'email',
    password: 'password',
    role_id: 'role_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    email?: StringFilter | string
    password?: StringFilter | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    role_id?: IntFilter | number
    patients?: PatientListRelationFilter
    specialists?: SpecialistListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    email?: SortOrder
    password?: SortOrder
    role?: RoleOrderByWithRelationInput
    role_id?: SortOrder
    patients?: PatientOrderByRelationAggregateInput
    specialists?: SpecialistOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role_id?: IntWithAggregatesFilter | number
  }

  export type PatientWhereInput = {
    AND?: Enumerable<PatientWhereInput>
    OR?: Enumerable<PatientWhereInput>
    NOT?: Enumerable<PatientWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    email?: StringFilter | string
    appointments?: AppointmentListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    user?: UserOrderByWithRelationInput
    email?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = {
    id?: number
  }

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PatientScalarWhereWithAggregatesInput>
    OR?: Enumerable<PatientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PatientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type SpecializationWhereInput = {
    AND?: Enumerable<SpecializationWhereInput>
    OR?: Enumerable<SpecializationWhereInput>
    NOT?: Enumerable<SpecializationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    specialists?: SpecialistListRelationFilter
    keywords?: KeywordListRelationFilter
  }

  export type SpecializationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    specialists?: SpecialistOrderByRelationAggregateInput
    keywords?: KeywordOrderByRelationAggregateInput
  }

  export type SpecializationWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type SpecializationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: SpecializationCountOrderByAggregateInput
    _avg?: SpecializationAvgOrderByAggregateInput
    _max?: SpecializationMaxOrderByAggregateInput
    _min?: SpecializationMinOrderByAggregateInput
    _sum?: SpecializationSumOrderByAggregateInput
  }

  export type SpecializationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecializationScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecializationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecializationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type DocumentWhereInput = {
    AND?: Enumerable<DocumentWhereInput>
    OR?: Enumerable<DocumentWhereInput>
    NOT?: Enumerable<DocumentWhereInput>
    id?: IntFilter | number
    specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
    specialist_id?: IntFilter | number
    path?: StringFilter | string
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    specialist?: SpecialistOrderByWithRelationInput
    specialist_id?: SortOrder
    path?: SortOrder
  }

  export type DocumentWhereUniqueInput = {
    id?: number
  }

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    specialist_id?: SortOrder
    path?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DocumentScalarWhereWithAggregatesInput>
    OR?: Enumerable<DocumentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DocumentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    specialist_id?: IntWithAggregatesFilter | number
    path?: StringWithAggregatesFilter | string
  }

  export type SpecialistWhereInput = {
    AND?: Enumerable<SpecialistWhereInput>
    OR?: Enumerable<SpecialistWhereInput>
    NOT?: Enumerable<SpecialistWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    specialization?: XOR<SpecializationRelationFilter, SpecializationWhereInput>
    specialization_id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    email?: StringFilter | string
    price?: FloatFilter | number
    confirmed?: BoolFilter | boolean
    appointments?: AppointmentListRelationFilter
    documents?: DocumentListRelationFilter
  }

  export type SpecialistOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    specialization?: SpecializationOrderByWithRelationInput
    specialization_id?: SortOrder
    user?: UserOrderByWithRelationInput
    email?: SortOrder
    price?: SortOrder
    confirmed?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type SpecialistWhereUniqueInput = {
    id?: number
  }

  export type SpecialistOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    specialization_id?: SortOrder
    email?: SortOrder
    price?: SortOrder
    confirmed?: SortOrder
    _count?: SpecialistCountOrderByAggregateInput
    _avg?: SpecialistAvgOrderByAggregateInput
    _max?: SpecialistMaxOrderByAggregateInput
    _min?: SpecialistMinOrderByAggregateInput
    _sum?: SpecialistSumOrderByAggregateInput
  }

  export type SpecialistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    specialization_id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    confirmed?: BoolWithAggregatesFilter | boolean
  }

  export type KeywordWhereInput = {
    AND?: Enumerable<KeywordWhereInput>
    OR?: Enumerable<KeywordWhereInput>
    NOT?: Enumerable<KeywordWhereInput>
    id?: IntFilter | number
    specialization?: XOR<SpecializationRelationFilter, SpecializationWhereInput>
    specialization_id?: IntFilter | number
  }

  export type KeywordOrderByWithRelationInput = {
    id?: SortOrder
    specialization?: SpecializationOrderByWithRelationInput
    specialization_id?: SortOrder
  }

  export type KeywordWhereUniqueInput = {
    id?: number
  }

  export type KeywordOrderByWithAggregationInput = {
    id?: SortOrder
    specialization_id?: SortOrder
    _count?: KeywordCountOrderByAggregateInput
    _avg?: KeywordAvgOrderByAggregateInput
    _max?: KeywordMaxOrderByAggregateInput
    _min?: KeywordMinOrderByAggregateInput
    _sum?: KeywordSumOrderByAggregateInput
  }

  export type KeywordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    specialization_id?: IntWithAggregatesFilter | number
  }

  export type RatingWhereInput = {
    AND?: Enumerable<RatingWhereInput>
    OR?: Enumerable<RatingWhereInput>
    NOT?: Enumerable<RatingWhereInput>
    id?: IntFilter | number
    appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
    appointment_id?: IntFilter | number
    reviews?: StringFilter | string
    count_rated?: IntFilter | number
    rating?: FloatFilter | number
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    appointment?: AppointmentOrderByWithRelationInput
    appointment_id?: SortOrder
    reviews?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type RatingWhereUniqueInput = {
    id?: number
  }

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    reviews?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RatingScalarWhereWithAggregatesInput>
    OR?: Enumerable<RatingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RatingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    appointment_id?: IntWithAggregatesFilter | number
    reviews?: StringWithAggregatesFilter | string
    count_rated?: IntWithAggregatesFilter | number
    rating?: FloatWithAggregatesFilter | number
  }

  export type PaymentWhereInput = {
    AND?: Enumerable<PaymentWhereInput>
    OR?: Enumerable<PaymentWhereInput>
    NOT?: Enumerable<PaymentWhereInput>
    id?: IntFilter | number
    appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
    appointment_id?: IntFilter | number
    amount?: IntFilter | number
    date?: DateTimeFilter | Date | string
    bill_number?: IntFilter | number
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    appointment?: AppointmentOrderByWithRelationInput
    appointment_id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    bill_number?: SortOrder
  }

  export type PaymentWhereUniqueInput = {
    id?: number
  }

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    bill_number?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    OR?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    appointment_id?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    bill_number?: IntWithAggregatesFilter | number
  }

  export type RoomWhereInput = {
    AND?: Enumerable<RoomWhereInput>
    OR?: Enumerable<RoomWhereInput>
    NOT?: Enumerable<RoomWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    appointments?: AppointmentListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = {
    id?: number
  }

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type AppointmentWhereInput = {
    AND?: Enumerable<AppointmentWhereInput>
    OR?: Enumerable<AppointmentWhereInput>
    NOT?: Enumerable<AppointmentWhereInput>
    id?: IntFilter | number
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    patient_id?: IntFilter | number
    specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
    specialist_id?: IntFilter | number
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    room_id?: IntFilter | number
    appointed_at?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    comments?: StringFilter | string
    approved?: BoolFilter | boolean
    ratings?: RatingListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patient?: PatientOrderByWithRelationInput
    patient_id?: SortOrder
    specialist?: SpecialistOrderByWithRelationInput
    specialist_id?: SortOrder
    room?: RoomOrderByWithRelationInput
    room_id?: SortOrder
    appointed_at?: SortOrder
    end_time?: SortOrder
    comments?: SortOrder
    approved?: SortOrder
    ratings?: RatingOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = {
    id?: number
  }

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
    appointed_at?: SortOrder
    end_time?: SortOrder
    comments?: SortOrder
    approved?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    patient_id?: IntWithAggregatesFilter | number
    specialist_id?: IntWithAggregatesFilter | number
    room_id?: IntWithAggregatesFilter | number
    appointed_at?: DateTimeWithAggregatesFilter | Date | string
    end_time?: DateTimeWithAggregatesFilter | Date | string
    comments?: StringWithAggregatesFilter | string
    approved?: BoolWithAggregatesFilter | boolean
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: RoleCreateNestedOneWithoutUsersInput
    patients?: PatientCreateNestedManyWithoutUserInput
    specialists?: SpecialistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    email: string
    password: string
    role_id: number
    patients?: PatientUncheckedCreateNestedManyWithoutUserInput
    specialists?: SpecialistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    patients?: PatientUpdateManyWithoutUserNestedInput
    specialists?: SpecialistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    patients?: PatientUncheckedUpdateManyWithoutUserNestedInput
    specialists?: SpecialistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    email: string
    password: string
    role_id: number
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateInput = {
    first_name: string
    last_name: string
    user: UserCreateNestedOneWithoutPatientsInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientsNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
  }

  export type PatientUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SpecializationCreateInput = {
    name: string
    description: string
    specialists?: SpecialistCreateNestedManyWithoutSpecializationInput
    keywords?: KeywordCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    specialists?: SpecialistUncheckedCreateNestedManyWithoutSpecializationInput
    keywords?: KeywordUncheckedCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    specialists?: SpecialistUpdateManyWithoutSpecializationNestedInput
    keywords?: KeywordUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    specialists?: SpecialistUncheckedUpdateManyWithoutSpecializationNestedInput
    keywords?: KeywordUncheckedUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type SpecializationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SpecializationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    specialist: SpecialistCreateNestedOneWithoutDocumentsInput
    path: string
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    specialist_id: number
    path: string
  }

  export type DocumentUpdateInput = {
    specialist?: SpecialistUpdateOneRequiredWithoutDocumentsNestedInput
    path?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: number
    specialist_id: number
    path: string
  }

  export type DocumentUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialistCreateInput = {
    first_name: string
    last_name: string
    specialization: SpecializationCreateNestedOneWithoutSpecialistsInput
    user: UserCreateNestedOneWithoutSpecialistsInput
    price: number
    confirmed: boolean
    appointments?: AppointmentCreateNestedManyWithoutSpecialistInput
    documents?: DocumentCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    email: string
    price: number
    confirmed: boolean
    appointments?: AppointmentUncheckedCreateNestedManyWithoutSpecialistInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization?: SpecializationUpdateOneRequiredWithoutSpecialistsNestedInput
    user?: UserUpdateOneRequiredWithoutSpecialistsNestedInput
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUncheckedUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    email: string
    price: number
    confirmed: boolean
  }

  export type SpecialistUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeywordCreateInput = {
    specialization: SpecializationCreateNestedOneWithoutKeywordsInput
  }

  export type KeywordUncheckedCreateInput = {
    id?: number
    specialization_id: number
  }

  export type KeywordUpdateInput = {
    specialization?: SpecializationUpdateOneRequiredWithoutKeywordsNestedInput
  }

  export type KeywordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialization_id?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordCreateManyInput = {
    id?: number
    specialization_id: number
  }

  export type KeywordUpdateManyMutationInput = {

  }

  export type KeywordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialization_id?: IntFieldUpdateOperationsInput | number
  }

  export type RatingCreateInput = {
    appointment: AppointmentCreateNestedOneWithoutRatingsInput
    reviews: string
    count_rated: number
    rating: number
  }

  export type RatingUncheckedCreateInput = {
    id?: number
    appointment_id: number
    reviews: string
    count_rated: number
    rating: number
  }

  export type RatingUpdateInput = {
    appointment?: AppointmentUpdateOneRequiredWithoutRatingsNestedInput
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_id?: IntFieldUpdateOperationsInput | number
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type RatingCreateManyInput = {
    id?: number
    appointment_id: number
    reviews: string
    count_rated: number
    rating: number
  }

  export type RatingUpdateManyMutationInput = {
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_id?: IntFieldUpdateOperationsInput | number
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentCreateInput = {
    appointment: AppointmentCreateNestedOneWithoutPaymentsInput
    amount: number
    date: Date | string
    bill_number: number
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    appointment_id: number
    amount: number
    date: Date | string
    bill_number: number
  }

  export type PaymentUpdateInput = {
    appointment?: AppointmentUpdateOneRequiredWithoutPaymentsNestedInput
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateManyInput = {
    id?: number
    appointment_id: number
    amount: number
    date: Date | string
    bill_number: number
  }

  export type PaymentUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointment_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type RoomCreateInput = {
    name: string
    appointments?: AppointmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    name: string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    name: string
  }

  export type RoomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateInput = {
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    specialist: SpecialistCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingCreateNestedManyWithoutAppointmentInput
    payments?: PaymentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingUncheckedCreateNestedManyWithoutAppointmentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    specialist?: SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUncheckedUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
  }

  export type AppointmentUpdateManyMutationInput = {
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type SpecialistListRelationFilter = {
    every?: SpecialistWhereInput
    some?: SpecialistWhereInput
    none?: SpecialistWhereInput
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecialistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    role_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    role_id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KeywordListRelationFilter = {
    every?: KeywordWhereInput
    some?: KeywordWhereInput
    none?: KeywordWhereInput
  }

  export type KeywordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecializationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SpecializationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SpecializationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SpecializationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SpecializationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SpecialistRelationFilter = {
    is?: SpecialistWhereInput
    isNot?: SpecialistWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    specialist_id?: SortOrder
    path?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    specialist_id?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    specialist_id?: SortOrder
    path?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    specialist_id?: SortOrder
    path?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    specialist_id?: SortOrder
  }

  export type SpecializationRelationFilter = {
    is?: SpecializationWhereInput
    isNot?: SpecializationWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecialistCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    specialization_id?: SortOrder
    email?: SortOrder
    price?: SortOrder
    confirmed?: SortOrder
  }

  export type SpecialistAvgOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
    price?: SortOrder
  }

  export type SpecialistMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    specialization_id?: SortOrder
    email?: SortOrder
    price?: SortOrder
    confirmed?: SortOrder
  }

  export type SpecialistMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    specialization_id?: SortOrder
    email?: SortOrder
    price?: SortOrder
    confirmed?: SortOrder
  }

  export type SpecialistSumOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type KeywordCountOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
  }

  export type KeywordAvgOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
  }

  export type KeywordMaxOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
  }

  export type KeywordMinOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
  }

  export type KeywordSumOrderByAggregateInput = {
    id?: SortOrder
    specialization_id?: SortOrder
  }

  export type AppointmentRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    reviews?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    reviews?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    reviews?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    count_rated?: SortOrder
    rating?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    bill_number?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    bill_number?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    bill_number?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    bill_number?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    appointment_id?: SortOrder
    amount?: SortOrder
    bill_number?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
    appointed_at?: SortOrder
    end_time?: SortOrder
    comments?: SortOrder
    approved?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
    appointed_at?: SortOrder
    end_time?: SortOrder
    comments?: SortOrder
    approved?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
    appointed_at?: SortOrder
    end_time?: SortOrder
    comments?: SortOrder
    approved?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    specialist_id?: SortOrder
    room_id?: SortOrder
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRoleInput>, Enumerable<UserUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: UserCreateManyRoleInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type PatientCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientCreateWithoutUserInput>, Enumerable<PatientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutUserInput>
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type SpecialistCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutUserInput>, Enumerable<SpecialistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutUserInput>
    createMany?: SpecialistCreateManyUserInputEnvelope
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PatientCreateWithoutUserInput>, Enumerable<PatientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutUserInput>
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type SpecialistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutUserInput>, Enumerable<SpecialistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutUserInput>
    createMany?: SpecialistCreateManyUserInputEnvelope
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type PatientUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PatientCreateWithoutUserInput>, Enumerable<PatientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PatientCreateManyUserInputEnvelope
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    connect?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type SpecialistUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutUserInput>, Enumerable<SpecialistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SpecialistCreateManyUserInputEnvelope
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PatientCreateWithoutUserInput>, Enumerable<PatientUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PatientCreateManyUserInputEnvelope
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    connect?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type SpecialistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutUserInput>, Enumerable<SpecialistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SpecialistCreateManyUserInputEnvelope
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPatientsInput = {
    create?: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsInput
    upsert?: UserUpsertWithoutPatientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPatientsInput, UserUncheckedUpdateWithoutPatientsInput>
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type SpecialistCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutSpecializationInput>, Enumerable<SpecialistUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutSpecializationInput>
    createMany?: SpecialistCreateManySpecializationInputEnvelope
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type KeywordCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<Enumerable<KeywordCreateWithoutSpecializationInput>, Enumerable<KeywordUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<KeywordCreateOrConnectWithoutSpecializationInput>
    createMany?: KeywordCreateManySpecializationInputEnvelope
    connect?: Enumerable<KeywordWhereUniqueInput>
  }

  export type SpecialistUncheckedCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutSpecializationInput>, Enumerable<SpecialistUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutSpecializationInput>
    createMany?: SpecialistCreateManySpecializationInputEnvelope
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type KeywordUncheckedCreateNestedManyWithoutSpecializationInput = {
    create?: XOR<Enumerable<KeywordCreateWithoutSpecializationInput>, Enumerable<KeywordUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<KeywordCreateOrConnectWithoutSpecializationInput>
    createMany?: KeywordCreateManySpecializationInputEnvelope
    connect?: Enumerable<KeywordWhereUniqueInput>
  }

  export type SpecialistUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutSpecializationInput>, Enumerable<SpecialistUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutSpecializationInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutSpecializationInput>
    createMany?: SpecialistCreateManySpecializationInputEnvelope
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutSpecializationInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutSpecializationInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type KeywordUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<Enumerable<KeywordCreateWithoutSpecializationInput>, Enumerable<KeywordUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<KeywordCreateOrConnectWithoutSpecializationInput>
    upsert?: Enumerable<KeywordUpsertWithWhereUniqueWithoutSpecializationInput>
    createMany?: KeywordCreateManySpecializationInputEnvelope
    set?: Enumerable<KeywordWhereUniqueInput>
    disconnect?: Enumerable<KeywordWhereUniqueInput>
    delete?: Enumerable<KeywordWhereUniqueInput>
    connect?: Enumerable<KeywordWhereUniqueInput>
    update?: Enumerable<KeywordUpdateWithWhereUniqueWithoutSpecializationInput>
    updateMany?: Enumerable<KeywordUpdateManyWithWhereWithoutSpecializationInput>
    deleteMany?: Enumerable<KeywordScalarWhereInput>
  }

  export type SpecialistUncheckedUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutSpecializationInput>, Enumerable<SpecialistUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutSpecializationInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutSpecializationInput>
    createMany?: SpecialistCreateManySpecializationInputEnvelope
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutSpecializationInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutSpecializationInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type KeywordUncheckedUpdateManyWithoutSpecializationNestedInput = {
    create?: XOR<Enumerable<KeywordCreateWithoutSpecializationInput>, Enumerable<KeywordUncheckedCreateWithoutSpecializationInput>>
    connectOrCreate?: Enumerable<KeywordCreateOrConnectWithoutSpecializationInput>
    upsert?: Enumerable<KeywordUpsertWithWhereUniqueWithoutSpecializationInput>
    createMany?: KeywordCreateManySpecializationInputEnvelope
    set?: Enumerable<KeywordWhereUniqueInput>
    disconnect?: Enumerable<KeywordWhereUniqueInput>
    delete?: Enumerable<KeywordWhereUniqueInput>
    connect?: Enumerable<KeywordWhereUniqueInput>
    update?: Enumerable<KeywordUpdateWithWhereUniqueWithoutSpecializationInput>
    updateMany?: Enumerable<KeywordUpdateManyWithWhereWithoutSpecializationInput>
    deleteMany?: Enumerable<KeywordScalarWhereInput>
  }

  export type SpecialistCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<SpecialistCreateWithoutDocumentsInput, SpecialistUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutDocumentsInput
    connect?: SpecialistWhereUniqueInput
  }

  export type SpecialistUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<SpecialistCreateWithoutDocumentsInput, SpecialistUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutDocumentsInput
    upsert?: SpecialistUpsertWithoutDocumentsInput
    connect?: SpecialistWhereUniqueInput
    update?: XOR<SpecialistUpdateWithoutDocumentsInput, SpecialistUncheckedUpdateWithoutDocumentsInput>
  }

  export type SpecializationCreateNestedOneWithoutSpecialistsInput = {
    create?: XOR<SpecializationCreateWithoutSpecialistsInput, SpecializationUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutSpecialistsInput
    connect?: SpecializationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSpecialistsInput = {
    create?: XOR<UserCreateWithoutSpecialistsInput, UserUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpecialistsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutSpecialistInput>, Enumerable<AppointmentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutSpecialistInput>
    createMany?: AppointmentCreateManySpecialistInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type DocumentCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<DocumentCreateWithoutSpecialistInput>, Enumerable<DocumentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<DocumentCreateOrConnectWithoutSpecialistInput>
    createMany?: DocumentCreateManySpecialistInputEnvelope
    connect?: Enumerable<DocumentWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutSpecialistInput>, Enumerable<AppointmentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutSpecialistInput>
    createMany?: AppointmentCreateManySpecialistInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type DocumentUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<DocumentCreateWithoutSpecialistInput>, Enumerable<DocumentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<DocumentCreateOrConnectWithoutSpecialistInput>
    createMany?: DocumentCreateManySpecialistInputEnvelope
    connect?: Enumerable<DocumentWhereUniqueInput>
  }

  export type SpecializationUpdateOneRequiredWithoutSpecialistsNestedInput = {
    create?: XOR<SpecializationCreateWithoutSpecialistsInput, SpecializationUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutSpecialistsInput
    upsert?: SpecializationUpsertWithoutSpecialistsInput
    connect?: SpecializationWhereUniqueInput
    update?: XOR<SpecializationUpdateWithoutSpecialistsInput, SpecializationUncheckedUpdateWithoutSpecialistsInput>
  }

  export type UserUpdateOneRequiredWithoutSpecialistsNestedInput = {
    create?: XOR<UserCreateWithoutSpecialistsInput, UserUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpecialistsInput
    upsert?: UserUpsertWithoutSpecialistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSpecialistsInput, UserUncheckedUpdateWithoutSpecialistsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AppointmentUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutSpecialistInput>, Enumerable<AppointmentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutSpecialistInput>
    createMany?: AppointmentCreateManySpecialistInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type DocumentUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<DocumentCreateWithoutSpecialistInput>, Enumerable<DocumentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<DocumentCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<DocumentUpsertWithWhereUniqueWithoutSpecialistInput>
    createMany?: DocumentCreateManySpecialistInputEnvelope
    set?: Enumerable<DocumentWhereUniqueInput>
    disconnect?: Enumerable<DocumentWhereUniqueInput>
    delete?: Enumerable<DocumentWhereUniqueInput>
    connect?: Enumerable<DocumentWhereUniqueInput>
    update?: Enumerable<DocumentUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<DocumentUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<DocumentScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutSpecialistInput>, Enumerable<AppointmentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutSpecialistInput>
    createMany?: AppointmentCreateManySpecialistInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type DocumentUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<DocumentCreateWithoutSpecialistInput>, Enumerable<DocumentUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<DocumentCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<DocumentUpsertWithWhereUniqueWithoutSpecialistInput>
    createMany?: DocumentCreateManySpecialistInputEnvelope
    set?: Enumerable<DocumentWhereUniqueInput>
    disconnect?: Enumerable<DocumentWhereUniqueInput>
    delete?: Enumerable<DocumentWhereUniqueInput>
    connect?: Enumerable<DocumentWhereUniqueInput>
    update?: Enumerable<DocumentUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<DocumentUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<DocumentScalarWhereInput>
  }

  export type SpecializationCreateNestedOneWithoutKeywordsInput = {
    create?: XOR<SpecializationCreateWithoutKeywordsInput, SpecializationUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutKeywordsInput
    connect?: SpecializationWhereUniqueInput
  }

  export type SpecializationUpdateOneRequiredWithoutKeywordsNestedInput = {
    create?: XOR<SpecializationCreateWithoutKeywordsInput, SpecializationUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: SpecializationCreateOrConnectWithoutKeywordsInput
    upsert?: SpecializationUpsertWithoutKeywordsInput
    connect?: SpecializationWhereUniqueInput
    update?: XOR<SpecializationUpdateWithoutKeywordsInput, SpecializationUncheckedUpdateWithoutKeywordsInput>
  }

  export type AppointmentCreateNestedOneWithoutRatingsInput = {
    create?: XOR<AppointmentCreateWithoutRatingsInput, AppointmentUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutRatingsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type AppointmentUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<AppointmentCreateWithoutRatingsInput, AppointmentUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutRatingsInput
    upsert?: AppointmentUpsertWithoutRatingsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<AppointmentUpdateWithoutRatingsInput, AppointmentUncheckedUpdateWithoutRatingsInput>
  }

  export type AppointmentCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<AppointmentCreateWithoutPaymentsInput, AppointmentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPaymentsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type AppointmentUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<AppointmentCreateWithoutPaymentsInput, AppointmentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPaymentsInput
    upsert?: AppointmentUpsertWithoutPaymentsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<AppointmentUpdateWithoutPaymentsInput, AppointmentUncheckedUpdateWithoutPaymentsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AppointmentCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRoomInput>, Enumerable<AppointmentUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRoomInput>
    createMany?: AppointmentCreateManyRoomInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRoomInput>, Enumerable<AppointmentUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRoomInput>
    createMany?: AppointmentCreateManyRoomInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRoomInput>, Enumerable<AppointmentUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: AppointmentCreateManyRoomInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRoomInput>, Enumerable<AppointmentUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: AppointmentCreateManyRoomInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type SpecialistCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<SpecialistCreateWithoutAppointmentsInput, SpecialistUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutAppointmentsInput
    connect?: SpecialistWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    connect?: RoomWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<RatingCreateWithoutAppointmentInput>, Enumerable<RatingUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutAppointmentInput>
    createMany?: RatingCreateManyAppointmentInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type PaymentCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutAppointmentInput>, Enumerable<PaymentUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutAppointmentInput>
    createMany?: PaymentCreateManyAppointmentInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type RatingUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<RatingCreateWithoutAppointmentInput>, Enumerable<RatingUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutAppointmentInput>
    createMany?: RatingCreateManyAppointmentInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type PaymentUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutAppointmentInput>, Enumerable<PaymentUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutAppointmentInput>
    createMany?: PaymentCreateManyAppointmentInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<SpecialistCreateWithoutAppointmentsInput, SpecialistUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutAppointmentsInput
    upsert?: SpecialistUpsertWithoutAppointmentsInput
    connect?: SpecialistWhereUniqueInput
    update?: XOR<SpecialistUpdateWithoutAppointmentsInput, SpecialistUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RoomUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    upsert?: RoomUpsertWithoutAppointmentsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RatingUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutAppointmentInput>, Enumerable<RatingUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: RatingCreateManyAppointmentInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type PaymentUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutAppointmentInput>, Enumerable<PaymentUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: PaymentCreateManyAppointmentInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type RatingUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutAppointmentInput>, Enumerable<RatingUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: RatingCreateManyAppointmentInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type PaymentUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutAppointmentInput>, Enumerable<PaymentUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: PaymentCreateManyAppointmentInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserCreateWithoutRoleInput = {
    email: string
    password: string
    patients?: PatientCreateNestedManyWithoutUserInput
    specialists?: SpecialistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    email: string
    password: string
    patients?: PatientUncheckedCreateNestedManyWithoutUserInput
    specialists?: SpecialistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: Enumerable<UserCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    email?: StringFilter | string
    password?: StringFilter | string
    role_id?: IntFilter | number
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type PatientCreateWithoutUserInput = {
    first_name: string
    last_name: string
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: number
    first_name: string
    last_name: string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientCreateManyUserInputEnvelope = {
    data: Enumerable<PatientCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SpecialistCreateWithoutUserInput = {
    first_name: string
    last_name: string
    specialization: SpecializationCreateNestedOneWithoutSpecialistsInput
    price: number
    confirmed: boolean
    appointments?: AppointmentCreateNestedManyWithoutSpecialistInput
    documents?: DocumentCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutUserInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    price: number
    confirmed: boolean
    appointments?: AppointmentUncheckedCreateNestedManyWithoutSpecialistInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutUserInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutUserInput, SpecialistUncheckedCreateWithoutUserInput>
  }

  export type SpecialistCreateManyUserInputEnvelope = {
    data: Enumerable<SpecialistCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateManyWithWhereWithoutUserInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientsInput>
  }

  export type PatientScalarWhereInput = {
    AND?: Enumerable<PatientScalarWhereInput>
    OR?: Enumerable<PatientScalarWhereInput>
    NOT?: Enumerable<PatientScalarWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    email?: StringFilter | string
  }

  export type SpecialistUpsertWithWhereUniqueWithoutUserInput = {
    where: SpecialistWhereUniqueInput
    update: XOR<SpecialistUpdateWithoutUserInput, SpecialistUncheckedUpdateWithoutUserInput>
    create: XOR<SpecialistCreateWithoutUserInput, SpecialistUncheckedCreateWithoutUserInput>
  }

  export type SpecialistUpdateWithWhereUniqueWithoutUserInput = {
    where: SpecialistWhereUniqueInput
    data: XOR<SpecialistUpdateWithoutUserInput, SpecialistUncheckedUpdateWithoutUserInput>
  }

  export type SpecialistUpdateManyWithWhereWithoutUserInput = {
    where: SpecialistScalarWhereInput
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyWithoutSpecialistsInput>
  }

  export type SpecialistScalarWhereInput = {
    AND?: Enumerable<SpecialistScalarWhereInput>
    OR?: Enumerable<SpecialistScalarWhereInput>
    NOT?: Enumerable<SpecialistScalarWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    specialization_id?: IntFilter | number
    email?: StringFilter | string
    price?: FloatFilter | number
    confirmed?: BoolFilter | boolean
  }

  export type UserCreateWithoutPatientsInput = {
    email: string
    password: string
    role: RoleCreateNestedOneWithoutUsersInput
    specialists?: SpecialistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientsInput = {
    email: string
    password: string
    role_id: number
    specialists?: SpecialistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
  }

  export type AppointmentCreateWithoutPatientInput = {
    specialist: SpecialistCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingCreateNestedManyWithoutAppointmentInput
    payments?: PaymentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingUncheckedCreateNestedManyWithoutAppointmentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: Enumerable<AppointmentCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientsInput = {
    update: XOR<UserUpdateWithoutPatientsInput, UserUncheckedUpdateWithoutPatientsInput>
    create: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
  }

  export type UserUpdateWithoutPatientsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    specialists?: SpecialistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    specialists?: SpecialistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: Enumerable<AppointmentScalarWhereInput>
    OR?: Enumerable<AppointmentScalarWhereInput>
    NOT?: Enumerable<AppointmentScalarWhereInput>
    id?: IntFilter | number
    patient_id?: IntFilter | number
    specialist_id?: IntFilter | number
    room_id?: IntFilter | number
    appointed_at?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    comments?: StringFilter | string
    approved?: BoolFilter | boolean
  }

  export type SpecialistCreateWithoutSpecializationInput = {
    first_name: string
    last_name: string
    user: UserCreateNestedOneWithoutSpecialistsInput
    price: number
    confirmed: boolean
    appointments?: AppointmentCreateNestedManyWithoutSpecialistInput
    documents?: DocumentCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutSpecializationInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    price: number
    confirmed: boolean
    appointments?: AppointmentUncheckedCreateNestedManyWithoutSpecialistInput
    documents?: DocumentUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutSpecializationInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutSpecializationInput, SpecialistUncheckedCreateWithoutSpecializationInput>
  }

  export type SpecialistCreateManySpecializationInputEnvelope = {
    data: Enumerable<SpecialistCreateManySpecializationInput>
    skipDuplicates?: boolean
  }

  export type KeywordCreateWithoutSpecializationInput = {

  }

  export type KeywordUncheckedCreateWithoutSpecializationInput = {
    id?: number
  }

  export type KeywordCreateOrConnectWithoutSpecializationInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutSpecializationInput, KeywordUncheckedCreateWithoutSpecializationInput>
  }

  export type KeywordCreateManySpecializationInputEnvelope = {
    data: Enumerable<KeywordCreateManySpecializationInput>
    skipDuplicates?: boolean
  }

  export type SpecialistUpsertWithWhereUniqueWithoutSpecializationInput = {
    where: SpecialistWhereUniqueInput
    update: XOR<SpecialistUpdateWithoutSpecializationInput, SpecialistUncheckedUpdateWithoutSpecializationInput>
    create: XOR<SpecialistCreateWithoutSpecializationInput, SpecialistUncheckedCreateWithoutSpecializationInput>
  }

  export type SpecialistUpdateWithWhereUniqueWithoutSpecializationInput = {
    where: SpecialistWhereUniqueInput
    data: XOR<SpecialistUpdateWithoutSpecializationInput, SpecialistUncheckedUpdateWithoutSpecializationInput>
  }

  export type SpecialistUpdateManyWithWhereWithoutSpecializationInput = {
    where: SpecialistScalarWhereInput
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyWithoutSpecialistsInput>
  }

  export type KeywordUpsertWithWhereUniqueWithoutSpecializationInput = {
    where: KeywordWhereUniqueInput
    update: XOR<KeywordUpdateWithoutSpecializationInput, KeywordUncheckedUpdateWithoutSpecializationInput>
    create: XOR<KeywordCreateWithoutSpecializationInput, KeywordUncheckedCreateWithoutSpecializationInput>
  }

  export type KeywordUpdateWithWhereUniqueWithoutSpecializationInput = {
    where: KeywordWhereUniqueInput
    data: XOR<KeywordUpdateWithoutSpecializationInput, KeywordUncheckedUpdateWithoutSpecializationInput>
  }

  export type KeywordUpdateManyWithWhereWithoutSpecializationInput = {
    where: KeywordScalarWhereInput
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyWithoutKeywordsInput>
  }

  export type KeywordScalarWhereInput = {
    AND?: Enumerable<KeywordScalarWhereInput>
    OR?: Enumerable<KeywordScalarWhereInput>
    NOT?: Enumerable<KeywordScalarWhereInput>
    id?: IntFilter | number
    specialization_id?: IntFilter | number
  }

  export type SpecialistCreateWithoutDocumentsInput = {
    first_name: string
    last_name: string
    specialization: SpecializationCreateNestedOneWithoutSpecialistsInput
    user: UserCreateNestedOneWithoutSpecialistsInput
    price: number
    confirmed: boolean
    appointments?: AppointmentCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutDocumentsInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    email: string
    price: number
    confirmed: boolean
    appointments?: AppointmentUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutDocumentsInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutDocumentsInput, SpecialistUncheckedCreateWithoutDocumentsInput>
  }

  export type SpecialistUpsertWithoutDocumentsInput = {
    update: XOR<SpecialistUpdateWithoutDocumentsInput, SpecialistUncheckedUpdateWithoutDocumentsInput>
    create: XOR<SpecialistCreateWithoutDocumentsInput, SpecialistUncheckedCreateWithoutDocumentsInput>
  }

  export type SpecialistUpdateWithoutDocumentsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization?: SpecializationUpdateOneRequiredWithoutSpecialistsNestedInput
    user?: UserUpdateOneRequiredWithoutSpecialistsNestedInput
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecializationCreateWithoutSpecialistsInput = {
    name: string
    description: string
    keywords?: KeywordCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationUncheckedCreateWithoutSpecialistsInput = {
    id?: number
    name: string
    description: string
    keywords?: KeywordUncheckedCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationCreateOrConnectWithoutSpecialistsInput = {
    where: SpecializationWhereUniqueInput
    create: XOR<SpecializationCreateWithoutSpecialistsInput, SpecializationUncheckedCreateWithoutSpecialistsInput>
  }

  export type UserCreateWithoutSpecialistsInput = {
    email: string
    password: string
    role: RoleCreateNestedOneWithoutUsersInput
    patients?: PatientCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpecialistsInput = {
    email: string
    password: string
    role_id: number
    patients?: PatientUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpecialistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpecialistsInput, UserUncheckedCreateWithoutSpecialistsInput>
  }

  export type AppointmentCreateWithoutSpecialistInput = {
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingCreateNestedManyWithoutAppointmentInput
    payments?: PaymentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutSpecialistInput = {
    id?: number
    patient_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingUncheckedCreateNestedManyWithoutAppointmentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutSpecialistInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutSpecialistInput, AppointmentUncheckedCreateWithoutSpecialistInput>
  }

  export type AppointmentCreateManySpecialistInputEnvelope = {
    data: Enumerable<AppointmentCreateManySpecialistInput>
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutSpecialistInput = {
    path: string
  }

  export type DocumentUncheckedCreateWithoutSpecialistInput = {
    id?: number
    path: string
  }

  export type DocumentCreateOrConnectWithoutSpecialistInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutSpecialistInput, DocumentUncheckedCreateWithoutSpecialistInput>
  }

  export type DocumentCreateManySpecialistInputEnvelope = {
    data: Enumerable<DocumentCreateManySpecialistInput>
    skipDuplicates?: boolean
  }

  export type SpecializationUpsertWithoutSpecialistsInput = {
    update: XOR<SpecializationUpdateWithoutSpecialistsInput, SpecializationUncheckedUpdateWithoutSpecialistsInput>
    create: XOR<SpecializationCreateWithoutSpecialistsInput, SpecializationUncheckedCreateWithoutSpecialistsInput>
  }

  export type SpecializationUpdateWithoutSpecialistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: KeywordUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationUncheckedUpdateWithoutSpecialistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: KeywordUncheckedUpdateManyWithoutSpecializationNestedInput
  }

  export type UserUpsertWithoutSpecialistsInput = {
    update: XOR<UserUpdateWithoutSpecialistsInput, UserUncheckedUpdateWithoutSpecialistsInput>
    create: XOR<UserCreateWithoutSpecialistsInput, UserUncheckedCreateWithoutSpecialistsInput>
  }

  export type UserUpdateWithoutSpecialistsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    patients?: PatientUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpecialistsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: IntFieldUpdateOperationsInput | number
    patients?: PatientUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutSpecialistInput, AppointmentUncheckedUpdateWithoutSpecialistInput>
    create: XOR<AppointmentCreateWithoutSpecialistInput, AppointmentUncheckedCreateWithoutSpecialistInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutSpecialistInput, AppointmentUncheckedUpdateWithoutSpecialistInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutSpecialistInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutSpecialistInput, DocumentUncheckedUpdateWithoutSpecialistInput>
    create: XOR<DocumentCreateWithoutSpecialistInput, DocumentUncheckedCreateWithoutSpecialistInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutSpecialistInput, DocumentUncheckedUpdateWithoutSpecialistInput>
  }

  export type DocumentUpdateManyWithWhereWithoutSpecialistInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutDocumentsInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: Enumerable<DocumentScalarWhereInput>
    OR?: Enumerable<DocumentScalarWhereInput>
    NOT?: Enumerable<DocumentScalarWhereInput>
    id?: IntFilter | number
    specialist_id?: IntFilter | number
    path?: StringFilter | string
  }

  export type SpecializationCreateWithoutKeywordsInput = {
    name: string
    description: string
    specialists?: SpecialistCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationUncheckedCreateWithoutKeywordsInput = {
    id?: number
    name: string
    description: string
    specialists?: SpecialistUncheckedCreateNestedManyWithoutSpecializationInput
  }

  export type SpecializationCreateOrConnectWithoutKeywordsInput = {
    where: SpecializationWhereUniqueInput
    create: XOR<SpecializationCreateWithoutKeywordsInput, SpecializationUncheckedCreateWithoutKeywordsInput>
  }

  export type SpecializationUpsertWithoutKeywordsInput = {
    update: XOR<SpecializationUpdateWithoutKeywordsInput, SpecializationUncheckedUpdateWithoutKeywordsInput>
    create: XOR<SpecializationCreateWithoutKeywordsInput, SpecializationUncheckedCreateWithoutKeywordsInput>
  }

  export type SpecializationUpdateWithoutKeywordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    specialists?: SpecialistUpdateManyWithoutSpecializationNestedInput
  }

  export type SpecializationUncheckedUpdateWithoutKeywordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    specialists?: SpecialistUncheckedUpdateManyWithoutSpecializationNestedInput
  }

  export type AppointmentCreateWithoutRatingsInput = {
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    specialist: SpecialistCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    payments?: PaymentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutRatingsInput = {
    id?: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    payments?: PaymentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutRatingsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRatingsInput, AppointmentUncheckedCreateWithoutRatingsInput>
  }

  export type AppointmentUpsertWithoutRatingsInput = {
    update: XOR<AppointmentUpdateWithoutRatingsInput, AppointmentUncheckedUpdateWithoutRatingsInput>
    create: XOR<AppointmentCreateWithoutRatingsInput, AppointmentUncheckedCreateWithoutRatingsInput>
  }

  export type AppointmentUpdateWithoutRatingsInput = {
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    specialist?: SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    payments?: PaymentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateWithoutPaymentsInput = {
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    specialist: SpecialistCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPaymentsInput = {
    id?: number
    patient_id: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPaymentsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPaymentsInput, AppointmentUncheckedCreateWithoutPaymentsInput>
  }

  export type AppointmentUpsertWithoutPaymentsInput = {
    update: XOR<AppointmentUpdateWithoutPaymentsInput, AppointmentUncheckedUpdateWithoutPaymentsInput>
    create: XOR<AppointmentCreateWithoutPaymentsInput, AppointmentUncheckedCreateWithoutPaymentsInput>
  }

  export type AppointmentUpdateWithoutPaymentsInput = {
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    specialist?: SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateWithoutRoomInput = {
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    specialist: SpecialistCreateNestedOneWithoutAppointmentsInput
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingCreateNestedManyWithoutAppointmentInput
    payments?: PaymentCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutRoomInput = {
    id?: number
    patient_id: number
    specialist_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
    ratings?: RatingUncheckedCreateNestedManyWithoutAppointmentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput>
  }

  export type AppointmentCreateManyRoomInputEnvelope = {
    data: Enumerable<AppointmentCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutRoomInput, AppointmentUncheckedUpdateWithoutRoomInput>
    create: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutRoomInput, AppointmentUncheckedUpdateWithoutRoomInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutRoomInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type PatientCreateWithoutAppointmentsInput = {
    first_name: string
    last_name: string
    user: UserCreateNestedOneWithoutPatientsInput
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type SpecialistCreateWithoutAppointmentsInput = {
    first_name: string
    last_name: string
    specialization: SpecializationCreateNestedOneWithoutSpecialistsInput
    user: UserCreateNestedOneWithoutSpecialistsInput
    price: number
    confirmed: boolean
    documents?: DocumentCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    email: string
    price: number
    confirmed: boolean
    documents?: DocumentUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutAppointmentsInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutAppointmentsInput, SpecialistUncheckedCreateWithoutAppointmentsInput>
  }

  export type RoomCreateWithoutAppointmentsInput = {
    name: string
  }

  export type RoomUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
  }

  export type RoomCreateOrConnectWithoutAppointmentsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
  }

  export type RatingCreateWithoutAppointmentInput = {
    reviews: string
    count_rated: number
    rating: number
  }

  export type RatingUncheckedCreateWithoutAppointmentInput = {
    id?: number
    reviews: string
    count_rated: number
    rating: number
  }

  export type RatingCreateOrConnectWithoutAppointmentInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutAppointmentInput, RatingUncheckedCreateWithoutAppointmentInput>
  }

  export type RatingCreateManyAppointmentInputEnvelope = {
    data: Enumerable<RatingCreateManyAppointmentInput>
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutAppointmentInput = {
    amount: number
    date: Date | string
    bill_number: number
  }

  export type PaymentUncheckedCreateWithoutAppointmentInput = {
    id?: number
    amount: number
    date: Date | string
    bill_number: number
  }

  export type PaymentCreateOrConnectWithoutAppointmentInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutAppointmentInput, PaymentUncheckedCreateWithoutAppointmentInput>
  }

  export type PaymentCreateManyAppointmentInputEnvelope = {
    data: Enumerable<PaymentCreateManyAppointmentInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPatientsNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialistUpsertWithoutAppointmentsInput = {
    update: XOR<SpecialistUpdateWithoutAppointmentsInput, SpecialistUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<SpecialistCreateWithoutAppointmentsInput, SpecialistUncheckedCreateWithoutAppointmentsInput>
  }

  export type SpecialistUpdateWithoutAppointmentsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization?: SpecializationUpdateOneRequiredWithoutSpecialistsNestedInput
    user?: UserUpdateOneRequiredWithoutSpecialistsNestedInput
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    documents?: DocumentUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    documents?: DocumentUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type RoomUpsertWithoutAppointmentsInput = {
    update: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
  }

  export type RoomUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RatingUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutAppointmentInput, RatingUncheckedUpdateWithoutAppointmentInput>
    create: XOR<RatingCreateWithoutAppointmentInput, RatingUncheckedCreateWithoutAppointmentInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutAppointmentInput, RatingUncheckedUpdateWithoutAppointmentInput>
  }

  export type RatingUpdateManyWithWhereWithoutAppointmentInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutRatingsInput>
  }

  export type RatingScalarWhereInput = {
    AND?: Enumerable<RatingScalarWhereInput>
    OR?: Enumerable<RatingScalarWhereInput>
    NOT?: Enumerable<RatingScalarWhereInput>
    id?: IntFilter | number
    appointment_id?: IntFilter | number
    reviews?: StringFilter | string
    count_rated?: IntFilter | number
    rating?: FloatFilter | number
  }

  export type PaymentUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutAppointmentInput, PaymentUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PaymentCreateWithoutAppointmentInput, PaymentUncheckedCreateWithoutAppointmentInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutAppointmentInput, PaymentUncheckedUpdateWithoutAppointmentInput>
  }

  export type PaymentUpdateManyWithWhereWithoutAppointmentInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaymentsInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: Enumerable<PaymentScalarWhereInput>
    OR?: Enumerable<PaymentScalarWhereInput>
    NOT?: Enumerable<PaymentScalarWhereInput>
    id?: IntFilter | number
    appointment_id?: IntFilter | number
    amount?: IntFilter | number
    date?: DateTimeFilter | Date | string
    bill_number?: IntFilter | number
  }

  export type UserCreateManyRoleInput = {
    email: string
    password: string
  }

  export type UserUpdateWithoutRoleInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    patients?: PatientUpdateManyWithoutUserNestedInput
    specialists?: SpecialistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    patients?: PatientUncheckedUpdateManyWithoutUserNestedInput
    specialists?: SpecialistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PatientCreateManyUserInput = {
    id?: number
    first_name: string
    last_name: string
  }

  export type SpecialistCreateManyUserInput = {
    id?: number
    first_name: string
    last_name: string
    specialization_id: number
    price: number
    confirmed: boolean
  }

  export type PatientUpdateWithoutUserInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialistUpdateWithoutUserInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization?: SpecializationUpdateOneRequiredWithoutSpecialistsNestedInput
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUncheckedUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateManyWithoutSpecialistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    specialization_id?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentCreateManyPatientInput = {
    id?: number
    specialist_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
  }

  export type AppointmentUpdateWithoutPatientInput = {
    specialist?: SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUncheckedUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialistCreateManySpecializationInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    price: number
    confirmed: boolean
  }

  export type KeywordCreateManySpecializationInput = {
    id?: number
  }

  export type SpecialistUpdateWithoutSpecializationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSpecialistsNestedInput
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutSpecializationInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    appointments?: AppointmentUncheckedUpdateManyWithoutSpecialistNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type KeywordUpdateWithoutSpecializationInput = {

  }

  export type KeywordUncheckedUpdateWithoutSpecializationInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordUncheckedUpdateManyWithoutKeywordsInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateManySpecialistInput = {
    id?: number
    patient_id: number
    room_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
  }

  export type DocumentCreateManySpecialistInput = {
    id?: number
    path: string
  }

  export type AppointmentUpdateWithoutSpecialistInput = {
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutSpecialistInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUncheckedUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type DocumentUpdateWithoutSpecialistInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateWithoutSpecialistInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateManyRoomInput = {
    id?: number
    patient_id: number
    specialist_id: number
    appointed_at: Date | string
    end_time: Date | string
    comments: string
    approved: boolean
  }

  export type AppointmentUpdateWithoutRoomInput = {
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    specialist?: SpecialistUpdateOneRequiredWithoutAppointmentsNestedInput
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    specialist_id?: IntFieldUpdateOperationsInput | number
    appointed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    ratings?: RatingUncheckedUpdateManyWithoutAppointmentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type RatingCreateManyAppointmentInput = {
    id?: number
    reviews: string
    count_rated: number
    rating: number
  }

  export type PaymentCreateManyAppointmentInput = {
    id?: number
    amount: number
    date: Date | string
    bill_number: number
  }

  export type RatingUpdateWithoutAppointmentInput = {
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviews?: StringFieldUpdateOperationsInput | string
    count_rated?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutAppointmentInput = {
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bill_number?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}